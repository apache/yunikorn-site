"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84795],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),h=a,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},95332:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(58168),a=(t(96540),t(15680));const i={id:"rn-1.1.0",title:"Release Announcement v1.1.0"},o=void 0,s={type:"mdx",permalink:"/release-announce/1.1.0",source:"@site/src/pages/release-announce/1.1.0.md",title:"Release Announcement v1.1.0",description:"\x3c!--",frontMatter:{id:"rn-1.1.0",title:"Release Announcement v1.1.0"}},l=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"REST API documentation and enhancements",id:"rest-api-documentation-and-enhancements",level:3},{value:"Multi-architecture build",id:"multi-architecture-build",level:3},{value:"Recovery stabilization",id:"recovery-stabilization",level:3},{value:"DaemonSet scheduling",id:"daemonset-scheduling",level:3},{value:"e2e testing improvements",id:"e2e-testing-improvements",level:3},{value:"Community",id:"community",level:2}],c={toc:l},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"release-announcement-v110"},"Release Announcement v1.1.0"),(0,a.yg)("p",null,"We are pleased to announce that the Apache YuniKorn community has voted to release 1.1.0. Apache YuniKorn is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on container orchestration frameworks like Kubernetes for on-prem and on-cloud use cases."),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"The Apache YuniKorn community has fixed 89 ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/issues/?filter=12351692"},"JIRAs")," in this release. "),(0,a.yg)("p",null,"Release manager: Peter Bacsko"),(0,a.yg)("p",null,"Release date: 2022-09-08"),(0,a.yg)("h2",{id:"highlights"},"Highlights"),(0,a.yg)("h3",{id:"rest-api-documentation-and-enhancements"},"REST API documentation and enhancements"),(0,a.yg)("p",null,"The REST API now can return the details of a ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1217"},"specific application")," and list the ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1263"},"pending allocations")," of an application.\nDocumentation of the REST API have also been enhanced."),(0,a.yg)("h3",{id:"multi-architecture-build"},"Multi-architecture build"),(0,a.yg)("p",null,"With the ARM architecture becoming more popular, we now ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1215"},"build")," binaries and Docker images for both ",(0,a.yg)("inlineCode",{parentName:"p"},"amd64")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"arm64")," targets."),(0,a.yg)("h3",{id:"recovery-stabilization"},"Recovery stabilization"),(0,a.yg)("p",null,"Several issues have been identified during the recovery phase of Yunikorn which mostly affected gang scheduling (eg. running placeholders getting replaced ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1197"},"immediately"),") but also Spark ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1217"},"workloads"),". "),(0,a.yg)("h3",{id:"daemonset-scheduling"},"DaemonSet scheduling"),(0,a.yg)("p",null,"Scheduling of DaemonSet pods were problematic before this release. If the node was full, then those pods might not have been scheduled. However, it is usually important to start DeamonSet pods as they often perform tasks that are necessary on all nodes like log collection and aggregation, resource monitoring, storage management, etc. meaning they have priority over regular application pods."),(0,a.yg)("p",null,"The implementation of ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1085"},"YUNIKORN-1085")," ensures that we have a predictable preemption mechanism which terminates running pods if necessary to make room for DaemonSet pods."),(0,a.yg)("h3",{id:"e2e-testing-improvements"},"e2e testing improvements"),(0,a.yg)("p",null,"Additional end-to-end tests have been ",(0,a.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-751"},"written")," to increase the coverage of Yunikorn as we support more K8s versions."),(0,a.yg)("h2",{id:"community"},"Community"),(0,a.yg)("p",null,"The Apache YuniKorn community is pleased to welcome new PMC members Peter Bacsko, Manikandan Ramaraj and committer Ted Lin."))}u.isMDXComponent=!0}}]);