"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[72780],{58860:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var i=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),h=r,g=c["".concat(l,".").concat(h)]||c[h]||d[h]||a;return t?i.createElement(g,o(o({ref:n},u),{},{components:t})):i.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},55204:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=t(72994),r=(t(37953),t(58860));const a={id:"rn-1.5.0",title:"Release Announcement v1.5.0"},o=void 0,s={type:"mdx",permalink:"/release-announce/1.5.0",source:"@site/src/pages/release-announce/1.5.0.md",title:"Release Announcement v1.5.0",description:"\x3c!--",frontMatter:{id:"rn-1.5.0",title:"Release Announcement v1.5.0"}},l=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Kubernetes version support",id:"kubernetes-version-support",level:3},{value:"Event streaming API",id:"event-streaming-api",level:3},{value:"Web UI enhancements",id:"web-ui-enhancements",level:3},{value:"Improved Prometheus metric grouping",id:"improved-prometheus-metric-grouping",level:3},{value:"Revamped scheduler initialization support",id:"revamped-scheduler-initialization-support",level:3},{value:"Better allocation traceability",id:"better-allocation-traceability",level:3},{value:"REST API enhancements",id:"rest-api-enhancements",level:3},{value:"Incompatible changes",id:"incompatible-changes",level:2},{value:"State-aware scheduling deprecated",id:"state-aware-scheduling-deprecated",level:3},{value:"Compressed ConfigMap entry handling",id:"compressed-configmap-entry-handling",level:3},{value:"Partition vs. root queue limits",id:"partition-vs-root-queue-limits",level:3},{value:"Application sort policy is no longer inherited",id:"application-sort-policy-is-no-longer-inherited",level:3},{value:"REST API: Periodic state dump endpoint removed",id:"rest-api-periodic-state-dump-endpoint-removed",level:3},{value:"REST API: Response code changes",id:"rest-api-response-code-changes",level:3},{value:"REST API: Health check response code",id:"rest-api-health-check-response-code",level:3},{value:"Credits",id:"credits",level:2}],p={toc:l},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"release-announcement-v150"},"Release Announcement v1.5.0"),(0,r.yg)("p",null,"We are pleased to announce that the Apache YuniKorn community has voted to release 1.5.0.\nApache YuniKorn is a standalone resource scheduler, designed for managing and scheduling Batch and Data workloads on container\norchestration frameworks like Kubernetes for on-prem and on-cloud use cases."),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"The Apache YuniKorn community has resolved 219 ",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/issues/?filter=12353274"},"JIRAs")," in this release."),(0,r.yg)("p",null,"Release manager: TingYao Huang"),(0,r.yg)("p",null,"Release date: 2024-03-14"),(0,r.yg)("h2",{id:"highlights"},"Highlights"),(0,r.yg)("h3",{id:"kubernetes-version-support"},"Kubernetes version support"),(0,r.yg)("p",null,"YuniKorn 1.5.0 utilizes Kubernetes 1.29.2 as a build dependency, and adds\nofficial runtime support for Kubernetes 1.29 clusters. Kubernetes clusters from\n1.24 through 1.29 are supported at runtime."),(0,r.yg)("h3",{id:"event-streaming-api"},"Event streaming API"),(0,r.yg)("p",null,"Building on the application traceability enhancements released in YuniKorn\n1.4.0, YuniKorn 1.5.0 adds support for consumers to subscribe to YuniKorn\nevents in a streaming fashion. Additionaly, several new event types have\nbeen implemented. See the\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2115"},"YUNIKORN-2115")," umbrella\nJIRA for more information."),(0,r.yg)("h3",{id:"web-ui-enhancements"},"Web UI enhancements"),(0,r.yg)("p",null,"YuniKorn 1.5.0 includes a number of updates to the Web UI:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://issues.apache.org/jira/browse/YUNIKORN-1362"},"YUNIKORN-1362"),"\nAllow node list filtering based on selector"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://issues.apache.org/jira/browse/YUNIKORN-2088"},"YUNIKORN-2088"),"\nNode utilization chart updates"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://issues.apache.org/jira/browse/YUNIKORN-2214"},"YUNIKORN-2214"),"\nAdd Sorting functionality to the Allocation view"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://issues.apache.org/jira/browse/YUNIKORN-2414"},"YUNIKORN-2414"),"\nSupport air-gapped clusters by embedding fonts and icons")),(0,r.yg)("h3",{id:"improved-prometheus-metric-grouping"},"Improved Prometheus metric grouping"),(0,r.yg)("p",null,"YuniKorn queue metrics are now exposed via labels on a common\n",(0,r.yg)("inlineCode",{parentName:"p"},"yunikorn_queue_app")," metric with separate ",(0,r.yg)("inlineCode",{parentName:"p"},"queue")," labels for each queue.\nThe existing ",(0,r.yg)("inlineCode",{parentName:"p"},"yunikorn_{queue_name}_queue_app")," metrics are still generated,\nbut will be ",(0,r.yg)("strong",{parentName:"p"},"deprecated")," in YuniKorn 1.6.0 and ",(0,r.yg)("strong",{parentName:"p"},"removed")," in YuniKorn 1.7.0.\nSee ",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-970"},"YUNIKORN-970")," for\nfurther details."),(0,r.yg)("h3",{id:"revamped-scheduler-initialization-support"},"Revamped scheduler initialization support"),(0,r.yg)("p",null,"YuniKorn 1.5.0 has dramatically simplified the logic used during early\nstartup to reconcile existing allocations with YuniKorn's internal\nstate. The result is faster, more stable initialization and better\nconsistency with the Kubernetes API server. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2099"},"YUNIKORN-2099"),"."),(0,r.yg)("h3",{id:"better-allocation-traceability"},"Better allocation traceability"),(0,r.yg)("p",null,"YuniKorn internally tracks asks and allocations by a unique ID. In YuniKorn\n1.5.0, the ask ID (typically derived from the Pod UID in Kubernetes) will\nbe used as the basis for the allocation ID as well. A future enhancement is\nplanned to unify asks and allocations into a single object for even more\nsimplified tracking. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2204"},"YUNIKORN-2204")," for\ninformation regarding the YuniKorn 1.5.0 changes and\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2457"},"YUNIKORN-2457")," for\nfuture enhancements."),(0,r.yg)("h3",{id:"rest-api-enhancements"},"REST API enhancements"),(0,r.yg)("p",null,"The YuniKorn REST API has been enhanced to support the retrieval of\nnode utilization statistics for multiple resource types in addition to\nthe existing support for dominant resource type. This allows for more\nexpressive visualizations in the YuniKorn Web UI. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2257"},"YUNIKORN-2257")," for\ndetails."),(0,r.yg)("p",null,"Additionally, the REST API now supports querying rejected, running, and\ncompleted applications as well as individual applications without the\nneed to walk the queue heirarchy first. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2235"},"YUNIKORN-2235"),"."),(0,r.yg)("h2",{id:"incompatible-changes"},"Incompatible changes"),(0,r.yg)("h3",{id:"state-aware-scheduling-deprecated"},"State-aware scheduling deprecated"),(0,r.yg)("p",null,"State-aware scheduling has been deprecated in YuniKorn 1.5.0, and will be\nremoved in YuniKorn 1.6.0. To preserve backwards compatibility, as of YuniKorn\n1.6.0, the ",(0,r.yg)("inlineCode",{parentName:"p"},"stateaware")," application sorting policy will be treated as an alias\nfor ",(0,r.yg)("inlineCode",{parentName:"p"},"fifo"),". Users are encouraged to migrate directly to ",(0,r.yg)("inlineCode",{parentName:"p"},"fifo")," and utilize\ngang scheduling or specify queue maximum applications to limit concurrency\ninstead. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2440"},"YUNIKORN-2440")," for\nmore information."),(0,r.yg)("h3",{id:"compressed-configmap-entry-handling"},"Compressed ConfigMap entry handling"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1875"},"YUNIKORN-1875")," added\nsupport for compressed ConfigMap entries in YuniKorn 1.4.0 using gzip\ncompression. Due to an error in the implementation, values were required\nto be base64-encoded twice in the resulting YAML in order to be read.\nThis has been corrected in YuniKorn 1.5.0, but will result in a parsing\nerror if previously double-encoded data is encountered. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2287"},"YUNIKORN-2287")," for\nimplementation details."),(0,r.yg)("h3",{id:"partition-vs-root-queue-limits"},"Partition vs. root queue limits"),(0,r.yg)("p",null,"Previously, YuniKorn documentation stated that a root queue limit is equivalent\nto a partition limit. However, partition limits did not work correctly.\nPartition limits have now updated to be consistent with the documentation.\nSee ",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2260"},"YUNIKORN-2260")," for\nmore information."),(0,r.yg)("h3",{id:"application-sort-policy-is-no-longer-inherited"},"Application sort policy is no longer inherited"),(0,r.yg)("p",null,"In old versions of YuniKorn, the ",(0,r.yg)("inlineCode",{parentName:"p"},"application.sort.policy")," queue property\non a parent queue was inherited by child queues. This behavior was deprecated\nin favor of child templates in YuniKorn 0.12.1 and has produced warnings\nsince then. As of YuniKorn 1.5.0, the inheritance of ",(0,r.yg)("inlineCode",{parentName:"p"},"application.sort.policy"),"\nhas been removed. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-809"},"YUNIKORN-809")," for details."),(0,r.yg)("h3",{id:"rest-api-periodic-state-dump-endpoint-removed"},"REST API: Periodic state dump endpoint removed"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"/ws/v1/periodicstatedump")," endpoint in the REST API was deprecated\nand made a no-op in YuniKorn 1.2.0. It has been removed completely from\nYuniKorn 1.5.0. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2426"},"YUNIKORN-2426")," for\ndetails."),(0,r.yg)("h3",{id:"rest-api-response-code-changes"},"REST API: Response code changes"),(0,r.yg)("p",null,"Several response status codes in the REST API have been modified to better\nconform to best practices. Missing objects will now return 404 (Not Found)\ninstead of 400 (Bad Request). Disabled features will now return\n500 (Internal Server Error) instead of 400 (Bad Request) or 501\n(Not Implemented). See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-2163"},"YUNIKORN-2163")," for further\ndetails."),(0,r.yg)("h3",{id:"rest-api-health-check-response-code"},"REST API: Health check response code"),(0,r.yg)("p",null,"The health check REST API endpoint will now return a 200 (OK) regardless\nof health status rather than a 503 (Service Unavailable). This allows browser\nclients (such as the YuniKorn Web UI) to parse the response in all cases.\nTo verify the health checks, the JSON response itself shoud be consulted rather\nthan relying on the HTTP status code. See\n",(0,r.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/YUNIKORN-1997"},"YUNIKORN-1997")," for more\ninformation."),(0,r.yg)("h2",{id:"credits"},"Credits"),(0,r.yg)("p",null,"The YuniKorn 1.5.0 release would not have been possible without the\nhard work of our community and we would like to thank the following\ncontributors to this release:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Alex Stiff, Cliff Su, Craig Condit, Denis Coric, Dong-Lin Hsieh,\nGeordie Mai, Hsin-Ying Lee, Hsuan Zong Wu, Jia Sheng Chen,\nJiaChi Wang, Junyan Ling, Kuan-Po Tseng, Manikandan Ramaraj,\nMichael Akinyemi, Ovidiu Feodorov, Peter Bacsko, PoAn Yang,\nPriyansh Choudhary, Qi Zhu, Ryan Lo, Ted Lin, Vinayak Hegde,\nWeiwei Yang, Wilfred Spiegelenburg, William Tom, Xie Yifan,\nYongjun Zhang, Yu-Lin Chen")),(0,r.yg)("p",null,"Additionally, the Apache YuniKorn community would like to welcome new\nPMC member Chia-Ping Tsai and new committers Kuan-Po Tseng, Ryan Lo, and\nYu-Lin Chen."))}c.isMDXComponent=!0}}]);