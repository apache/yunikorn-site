"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[536],{15680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>d});var t=a(96540);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=t.createContext({}),l=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(a),g=o,d=p["".concat(s,".").concat(g)]||p[g]||m[g]||r;return a?t.createElement(d,i(i({ref:n},c),{},{components:a})):t.createElement(d,i({ref:n},c))}));function d(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u[p]="string"==typeof e?e:o,i[1]=u;for(var l=2;l<r;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},20595:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>u,toc:()=>l});var t=a(58168),o=(a(96540),a(15680));const r={id:"resource_quota_management",title:"Resource Quota Management"},i=void 0,u={unversionedId:"user_guide/resource_quota_management",id:"version-0.9.0/user_guide/resource_quota_management",title:"Resource Quota Management",description:"\x3c!--",source:"@site/versioned_docs/version-0.9.0/user_guide/resource_quota_mgmt.md",sourceDirName:"user_guide",slug:"/user_guide/resource_quota_management",permalink:"/docs/0.9.0/user_guide/resource_quota_management",draft:!1,tags:[],version:"0.9.0",frontMatter:{id:"resource_quota_management",title:"Resource Quota Management"},sidebar:"version-0.9.0/docs",previous:{title:"ACLs",permalink:"/docs/0.9.0/user_guide/acls"},next:{title:"Run Spark Jobs",permalink:"/docs/0.9.0/user_guide/workloads/run_spark"}},s={},l=[{value:"Option 1) Static queues",id:"option-1-static-queues",level:2},{value:"Goal",id:"goal",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Run workloads",id:"run-workloads",level:3},{value:"Option 2) 1:1 mapping from namespaces to queues",id:"option-2-11-mapping-from-namespaces-to-queues",level:2},{value:"Goal",id:"goal-1",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"Set up namespaces",id:"set-up-namespaces",level:3},{value:"Run workloads",id:"run-workloads-1",level:3}],c={toc:l},p="wrapper";function m(e){let{components:n,...a}=e;return(0,o.yg)(p,(0,t.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"YuniKorn can offer more fine-grained resource quota management comparing to simply\nusing namespace resource quota. Here are some how-to documents about setting up\nresource quota management with YuniKorn queues."),(0,o.yg)("h2",{id:"option-1-static-queues"},"Option 1) Static queues"),(0,o.yg)("h3",{id:"goal"},"Goal"),(0,o.yg)("p",null,"Pre-setup a hierarchy of queues with min/max capacity, users can only submit\njobs to the leaf queues. This approach fully manages the resource capacity for\neach of the queues, which is suitable to the scenarios that queues do not change\ntoo often."),(0,o.yg)("h3",{id:"configuration"},"Configuration"),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The following configuration is an example to demonstrate the format,\nyou need to setup the queue hierarchy based on your own structure and capacity,")),(0,o.yg)("p",null,"Apply the following configuration to YuniKorn's configmap:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},"partitions:\n  -\n    name: default\n    queues:\n      -\n        name: root\n        submitacl: '*'\n        queues:\n          -\n            name: advertisement\n            resources:\n              guaranteed:\n                memory: 500000\n                vcore: 50000\n              max:\n                memory: 800000\n                vcore: 80000\n          -\n            name: search\n            resources:\n              guaranteed:\n                memory: 400000\n                vcore: 40000\n              max:\n                memory: 600000\n                vcore: 60000\n          -\n            name: sandbox\n            resources:\n              guaranteed:\n                memory: 100000\n                vcore: 10000\n              max:\n                memory: 100000\n                vcore: 10000\n")),(0,o.yg)("p",null,"in this example, we are going to setup 3 queues under root, and each of them has\na specific min/max capacity set up."),(0,o.yg)("h3",{id:"run-workloads"},"Run workloads"),(0,o.yg)("p",null,"In order to run jobs in specific queues, you will need to set the following label in all pods' spec:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'labels:\n  app: my-test-app\n  applicationId: " my-test-app-01"\n  queue: root.sandbox\n')),(0,o.yg)("h2",{id:"option-2-11-mapping-from-namespaces-to-queues"},"Option 2) 1:1 mapping from namespaces to queues"),(0,o.yg)("h3",{id:"goal-1"},"Goal"),(0,o.yg)("p",null,"User just needs to setup namespaces, YuniKorn automatically maps each namespace to an internal resource queue (AKA dynamical queue).\nThere is no additional steps to create YuniKorn queues, all queues will be created dynamically,\nresource allocation and quotas will be managed by YuniKorn instead of the namespace resource quota."),(0,o.yg)("h3",{id:"configuration-1"},"Configuration"),(0,o.yg)("p",null,"Apply the following configuration to YuniKorn's configmap:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},"partitions:\n  -\n    name: default\n    placementrules:\n      - name: tag\n        value: namespace\n        create: true\n    queues:\n      - name: root\n        submitacl: '*'\n        properties:\n          application.sort.policy: stateaware\n\n")),(0,o.yg)("p",null,"Note, the property ",(0,o.yg)("inlineCode",{parentName:"p"},"application.sort.policy")," in this configuration is set to\n",(0,o.yg)("inlineCode",{parentName:"p"},"stateaware"),". This is a simple app sorting policy applicable for batch jobs, you\ncan find more document ",(0,o.yg)("a",{parentName:"p",href:"/docs/0.9.0/user_guide/sorting_policies#StateAwarePolicy"},"here"),"."),(0,o.yg)("p",null,"You can do this during the installation by overwriting the configuration in the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/apache/incubator-yunikorn-release/blob/724ec82d0d548598e170cc6d5ca6aaae00f8286c/helm-charts/yunikorn/values.yaml#L71-L81"},"helm chart template"),"."),(0,o.yg)("h3",{id:"set-up-namespaces"},"Set up namespaces"),(0,o.yg)("p",null,"Continue to create namespaces like before, do not create namespace quota anymore.\nInstead, set the following annotation in the namespace object:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'yunikorn.apache.org/namespace.max.cpu: "64"\nyunikorn.apache.org/namespace.max.memory: "100Gi"\n')),(0,o.yg)("p",null,"YuniKorn will parse the annotation and set the max capacity of the dynamical queue\nthat mapped to this namespace to 64 CPU and 100GB memory."),(0,o.yg)("h3",{id:"run-workloads-1"},"Run workloads"),(0,o.yg)("p",null,"Jobs continue to be submitted to namespaces, based on the ",(0,o.yg)("inlineCode",{parentName:"p"},"Placementrule")," used\nin the configuration. YuniKorn will automatically run the job and all its pods in\nthe corresponding queue. For example, if a job is submitted to namespace ",(0,o.yg)("inlineCode",{parentName:"p"},"development"),",\nthen you will see the job is running in ",(0,o.yg)("inlineCode",{parentName:"p"},"root.development")," queue."))}m.isMDXComponent=!0}}]);