"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65150],{58860:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>m});var r=n(37953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=i,m=c["".concat(s,".").concat(d)]||c[d]||p[d]||a;return n?r.createElement(m,l(l({ref:t},g),{},{components:n})):r.createElement(m,l({ref:t},g))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(72994),i=(n(37953),n(58860));const a={id:"e2e_test",title:"End-to-End Testing"},l=void 0,o={unversionedId:"developer_guide/e2e_test",id:"developer_guide/e2e_test",title:"End-to-End Testing",description:"\x3c!--",source:"@site/docs/developer_guide/e2e_test.md",sourceDirName:"developer_guide",slug:"/developer_guide/e2e_test",permalink:"/docs/next/developer_guide/e2e_test",draft:!1,tags:[],version:"current",frontMatter:{id:"e2e_test",title:"End-to-End Testing"},sidebar:"docs",previous:{title:"Scheduler Object States",permalink:"/docs/next/developer_guide/scheduler_object_states"},next:{title:"Architecture",permalink:"/docs/next/design/architecture"}},s={},u=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Understanding the Command Line Arguments",id:"understanding-the-command-line-arguments",level:2},{value:"Launching Tests",id:"launching-tests",level:2},{value:"Trigger through CLI",id:"trigger-through-cli",level:3}],g={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,r.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"End-to-end (e2e) tests for YuniKorn-K8shim provide a mechanism to test end-to-end behavior of the system, and is the last signal to ensure end user operations match developer specifications. "),(0,i.yg)("p",null,"The primary objectives of the e2e tests are to ensure a consistent and reliable behavior of the yunikorn code base, and to catch hard-to-test bugs before users do, when unit and integration tests are insufficient."),(0,i.yg)("p",null,"The e2e tests are built atop of ",(0,i.yg)("a",{parentName:"p",href:"https://onsi.github.io/ginkgo/"},"Ginkgo")," and ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/onsi/gomega"},"Gomega"),". There are a host of features that this Behavior-Driven Development (BDD) testing framework provides, and it is recommended that the developer read the documentation prior to diving into the tests."),(0,i.yg)("p",null,"Below is the structure of e2e tests, all contained within the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/apache/yunikorn-k8shim"},"yunikorn-k8shim"),"."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"test/e2e/")," contains tests for YuniKorn Features like Scheduling, Predicates etc"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"test/e2e/framework/configManager")," manages & maintains the test and cluster configuration"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"test/e2e/framework/helpers")," contains utility modules for k8s client, (de)serializers, rest api client and other common libraries."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"test/e2e/testdata")," contains all the test related data like configmaps, pod specs etc")),(0,i.yg)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,i.yg)("p",null,"This project requires Go to be installed. On OS X with Homebrew you can just run ",(0,i.yg)("inlineCode",{parentName:"p"},"brew install go"),".\nOR follow this doc for deploying go ",(0,i.yg)("a",{parentName:"p",href:"https://golang.org/doc/install"},"https://golang.org/doc/install")),(0,i.yg)("h2",{id:"understanding-the-command-line-arguments"},"Understanding the Command Line Arguments"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"yk-namespace")," - namespace under which YuniKorn is deployed. ","[Required]"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"kube-config")," - path to kube config file, needed for k8s client ","[Required]"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"yk-host")," - hostname of the YuniKorn REST Server, defaults to localhost.   "),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"yk-port")," - port number of the YuniKorn REST Server, defaults to 9080."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"yk-scheme")," - scheme of the YuniKorn REST Server, defaults to http."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"timeout")," -  timeout for all tests, defaults to 24 hours")),(0,i.yg)("h2",{id:"launching-tests"},"Launching Tests"),(0,i.yg)("h3",{id:"trigger-through-cli"},"Trigger through CLI"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Begin by installing a new cluster dedicated to testing, such as one named 'yktest'")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},"./scripts/run-e2e-tests.sh -a install -n yktest -v kindest/node:v1.28.0\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Launching CI tests is as simple as below.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'# We need to add a \'kind\' prefix to the argument of the run-e2e-tests.sh -n command.\nkubectl config use-context kind-yktest \nginkgo -r -v ci -timeout=2h -- -yk-namespace "yunikorn" -kube-config "$HOME/.kube/config"\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Launching all the tests can be done as.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'ginkgo -r -v -timeout=2h -- -yk-namespace "yunikorn" -kube-config "$HOME/.kube/config"\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Launching all the tests in specified e2e folder.\ne.g. test/e2e/user_group_limit/")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'cd test/e2e/\nginkgo -r user_group_limit -v -- -yk-namespace "yunikorn" -kube-config "$HOME/.kube/config"\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Launching specified test file.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'cd test/e2e/\nginkgo run -r -v --focus-file "admission_controller_test.go" -- -yk-namespace "yunikorn" -kube-config "$HOME/.kube/config"\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},'Launching specified test.\ne.g. Run test with ginkgo.it() spec name "Verify_maxapplications_with_a_specific_group_limit"')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'cd test/e2e/\nginkgo run -r -v --focus "Verify_maxapplications_with_a_specific_group_limit" -- -yk-namespace "yunikorn" -kube-config "$HOME/.kube/config"\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Launching all the tests except specified test file.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'cd test/e2e/\nginkgo run -r -v --skip-file "admission_controller_test.go" -- -yk-namespace "yunikorn" -kube-config "$HOME/.kube/config"\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Delete the cluster after we finish testing (this step is optional).")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},"./scripts/run-e2e-tests.sh -a cleanup -n yktest\n")))}p.isMDXComponent=!0}}]);