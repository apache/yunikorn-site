"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16308],{93030:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=n(13274),s=n(1780);const o={id:"sorting_policies",title:"Sorting Policies"},r=void 0,a={id:"user_guide/sorting_policies",title:"Sorting Policies",description:"\x3c!--",source:"@site/versioned_docs/version-1.1.0/user_guide/sorting_policies.md",sourceDirName:"user_guide",slug:"/user_guide/sorting_policies",permalink:"/docs/1.1.0/user_guide/sorting_policies",draft:!1,unlisted:!1,tags:[],version:"1.1.0",frontMatter:{id:"sorting_policies",title:"Sorting Policies"},sidebar:"docs",previous:{title:"User & Group Resolution",permalink:"/docs/1.1.0/user_guide/usergroup_resolution"},next:{title:"ACLs",permalink:"/docs/1.1.0/user_guide/acls"}},l={},c=[{value:"Application sorting",id:"application-sorting",level:2},{value:"FifoSortPolicy",id:"fifosortpolicy",level:3},{value:"FairSortPolicy",id:"fairsortpolicy",level:3},{value:"StateAwarePolicy",id:"stateawarepolicy",level:3},{value:"Node sorting",id:"node-sorting",level:2},{value:"FairnessPolicy",id:"fairnesspolicy",level:3},{value:"BinPackingPolicy",id:"binpackingpolicy",level:3},{value:"Resource weighting",id:"resource-weighting",level:2},{value:"Request sorting",id:"request-sorting",level:2}];function d(e){const i={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"The scheduler uses policies allow changing the scheduling behaviour without code changes.\nPolicies can be set for:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"#application-sorting",children:"Applications"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"#node-sorting",children:"Nodes"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"#request-sorting",children:"Requests"})}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"application-sorting",children:"Application sorting"}),"\n",(0,t.jsxs)(i.p,{children:["The application sorting policy is set for each queue via the config.\nA sorting policy setting is only effective on a ",(0,t.jsx)(i.code,{children:"leaf"})," queue.\nEach ",(0,t.jsx)(i.code,{children:"leaf"})," queue can use a different policy."]}),"\n",(0,t.jsxs)(i.p,{children:["A sorting policy only specifies the order in which the applications are sorted within a queue.\nThat order is crucial in specifying which application is considered first when assigning resources.\nSorting policies do ",(0,t.jsx)(i.em,{children:"not"})," affect the number of applications that are scheduled or active in the queue at the same time.\nAll applications that have pending resource requests can and will be scheduled in a queue unless specifically filtered out.\nEven when applications are sorted using a first in first out policy multiple applications will run in a queue in parallel."]}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.code,{children:"parent"})," queue will always use the fair policy to sort the child queues."]}),"\n",(0,t.jsxs)(i.p,{children:["The following configuration entry sets the application sorting policy to ",(0,t.jsx)(i.code,{children:"fifo"})," for the queue ",(0,t.jsx)(i.code,{children:"root.sandbox"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"partitions:\n  - name: default\n    queues:\n    - name: root\n      queues:\n      - name: sandbox\n        properties:\n          application.sort.policy: fifo\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The only applications that are considered during scheduling must have outstanding requests.\nA filter is applied ",(0,t.jsx)(i.em,{children:"while"})," sorting the applications to remove all that do not have outstanding requests."]}),"\n",(0,t.jsx)(i.h3,{id:"fifosortpolicy",children:"FifoSortPolicy"}),"\n",(0,t.jsxs)(i.p,{children:["Short description: first in first out, based on application create time",(0,t.jsx)(i.br,{}),"\n","Config value: fifo (default)",(0,t.jsx)(i.br,{}),"\n","Behaviour:",(0,t.jsx)(i.br,{}),"\n","Before sorting the applications are filtered and must have pending resource requests."]}),"\n",(0,t.jsx)(i.p,{children:"After filtering the applications left are sorted based on the application create time stamp only, no other filtering is applied.\nSince applications can only be added while the system is locked there can never be two applications with the exact same time stamp."}),"\n",(0,t.jsx)(i.p,{children:"The result is that the oldest application that requests resources gets resources.\nYounger applications will be given resources when all the current requests of older applications have been fulfilled."}),"\n",(0,t.jsx)(i.h3,{id:"fairsortpolicy",children:"FairSortPolicy"}),"\n",(0,t.jsxs)(i.p,{children:["Short description: fair based on usage",(0,t.jsx)(i.br,{}),"\n","Config value: fair",(0,t.jsx)(i.br,{}),"\n","Behaviour:",(0,t.jsx)(i.br,{}),"\n","Before sorting the applications are filtered and must have pending resource requests."]}),"\n",(0,t.jsx)(i.p,{children:"After filtering the applications left are sorted based on the application usage.\nThe usage of the application is defined as all confirmed and unconfirmed allocations for the applications.\nAll resources defined on the application will be taken into account when calculating the usage."}),"\n",(0,t.jsx)(i.p,{children:"The result is that the resources available are spread equally over all applications that request resources."}),"\n",(0,t.jsx)(i.h3,{id:"stateawarepolicy",children:"StateAwarePolicy"}),"\n",(0,t.jsxs)(i.p,{children:["Short description: limit of one (1) application in Starting or Accepted state",(0,t.jsx)(i.br,{}),"\n","Config value: stateaware",(0,t.jsx)(i.br,{}),"\n","Behaviour:",(0,t.jsx)(i.br,{}),"\n","This sorting policy requires an understanding of the application states.\nApplications states are described in the ",(0,t.jsx)(i.a,{href:"/docs/1.1.0/design/scheduler_object_states#application-state",children:"application states"})," documentation."]}),"\n",(0,t.jsx)(i.p,{children:"Before sorting applications the following filters are applied to all applications in the queue:\nThe first filter is based on the application state.\nThe following applications pass through the filter and generate the first intermediate list:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["all applications in the state ",(0,t.jsx)(i.em,{children:"running"})]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"one"})," (1) application in the ",(0,t.jsx)(i.em,{children:"starting"})," state"]}),"\n",(0,t.jsxs)(i.li,{children:["if there are ",(0,t.jsx)(i.em,{children:"no"})," applications in the ",(0,t.jsx)(i.em,{children:"starting"})," state ",(0,t.jsx)(i.em,{children:"one"})," (1) application in the ",(0,t.jsx)(i.em,{children:"accepted"})," state is added"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The second filter takes the result of the first filter as an input.\nThe preliminary list is filtered again: all applications ",(0,t.jsx)(i.em,{children:"without"})," a pending request are removed."]}),"\n",(0,t.jsx)(i.p,{children:"After filtering based on status and pending requests the applications that remain are sorted.\nThe final list is thus filtered twice with the remaining applications sorted on create time."}),"\n",(0,t.jsxs)(i.p,{children:["To recap the ",(0,t.jsx)(i.em,{children:"staring"})," and ",(0,t.jsx)(i.em,{children:"accepted"})," state interactions:\nThe application in the ",(0,t.jsx)(i.em,{children:"accepted"})," state is only added if there is no application in the ",(0,t.jsx)(i.em,{children:"starting"})," state.\nThe application in the ",(0,t.jsx)(i.em,{children:"starting"})," state does not have to have pending requests.\nAny application in the ",(0,t.jsx)(i.em,{children:"starting"})," state will prevent ",(0,t.jsx)(i.em,{children:"accepted"})," applications from being added to the filtered list."]}),"\n",(0,t.jsxs)(i.p,{children:["For further details see the ",(0,t.jsx)(i.a,{href:"/docs/1.1.0/design/state_aware_scheduling#example-run",children:"Example run"})," in the design document."]}),"\n",(0,t.jsx)(i.p,{children:"The result is that already running applications that request resources will get resources first.\nA drip feed of one new applications is added to the list of running applications to be allocated after all running applications."}),"\n",(0,t.jsx)(i.h2,{id:"node-sorting",children:"Node sorting"}),"\n",(0,t.jsx)(i.p,{children:"The node sorting policy is set for a partition via the config.\nEach partition can use a different policy."}),"\n",(0,t.jsxs)(i.p,{children:["The following configuration entry sets the node sorting policy to ",(0,t.jsx)(i.code,{children:"fair"})," for the partition ",(0,t.jsx)(i.code,{children:"default"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"partitions:\n  - name: default\n    nodesortpolicy:\n        type: fair\n"})}),"\n",(0,t.jsx)(i.h3,{id:"fairnesspolicy",children:"FairnessPolicy"}),"\n",(0,t.jsxs)(i.p,{children:["Short description: available resource, descending order",(0,t.jsx)(i.br,{}),"\n","Config value: fair (default)",(0,t.jsx)(i.br,{}),"\n","Behaviour:",(0,t.jsx)(i.br,{}),"\n","Sort the list of nodes by the amount of available resources so that the node with the ",(0,t.jsx)(i.em,{children:"highest"})," amount of available resource is the first in the list.\nAll resources defined on a node will be taken into account when calculating the usage.\nResources of the same type are compared for the nodes."]}),"\n",(0,t.jsx)(i.p,{children:"This results in a node with the lowest utilisation to be considered first for assigning new allocation.\nResulting in a spread of allocations over all available nodes.\nLeading to an overall lower utilisation of the individual available nodes, unless the whole environment is highly utilised.\nKeeping the load on all nodes at a similar level does help\nIn an environment that auto scales by adding new nodes this could trigger unexpected auto scale requests."}),"\n",(0,t.jsx)(i.h3,{id:"binpackingpolicy",children:"BinPackingPolicy"}),"\n",(0,t.jsxs)(i.p,{children:["Short description: available resource, ascending order",(0,t.jsx)(i.br,{}),"\n","Config value: binpacking",(0,t.jsx)(i.br,{}),"\n","Behaviour:",(0,t.jsx)(i.br,{}),"\n","Sort the list of nodes by the amount of available resources so that the node with the ",(0,t.jsx)(i.em,{children:"lowest"})," amount of available resource is the first in the list.\nAll resources defined on a node will be taken into account when calculating the usage.\nResources of the same type are compared for the nodes."]}),"\n",(0,t.jsx)(i.p,{children:"This results in a node with the highest utilisation to be considered first for assigning new allocation.\nResulting in a high(er) utilisation of a small(er) number of nodes, better suited for cloud deployments."}),"\n",(0,t.jsx)(i.h2,{id:"resource-weighting",children:"Resource weighting"}),"\n",(0,t.jsxs)(i.p,{children:["Node sorting policies may use the utilization of a node to determine ordering. Because nodes can have several unique\nresource types, a node's utilization is determined by a weighted average of its individual resource types. Resource\nweighting can be customized by using the ",(0,t.jsx)(i.code,{children:"resourceweights"})," section of ",(0,t.jsx)(i.code,{children:"nodesortpolicy"}),". If ",(0,t.jsx)(i.code,{children:"resourceweights"})," is not\npresent or empty, the default configuration sets the weight of both ",(0,t.jsx)(i.code,{children:"vcore"})," and ",(0,t.jsx)(i.code,{children:"memory"})," equally to ",(0,t.jsx)(i.code,{children:"1.0"}),". All other\nresource types are ignored. Only resource types explicitly mentioned will have a weight."]}),"\n",(0,t.jsxs)(i.p,{children:["YuniKorn tracks CPU resources internally as the ",(0,t.jsx)(i.code,{children:"vcore"})," resource type. This maps to the Kubernetes resource type ",(0,t.jsx)(i.code,{children:"cpu"}),".\nAll other resource types have consistent naming between YuniKorn and Kubernetes."]}),"\n",(0,t.jsxs)(i.p,{children:["For example, in the default configuration, if a node has ",(0,t.jsx)(i.code,{children:"90%"})," of its CPU and ",(0,t.jsx)(i.code,{children:"50%"})," of its memory allocated, the node\nwill be considered to be ",(0,t.jsx)(i.code,{children:"70%"})," utilized."]}),"\n",(0,t.jsxs)(i.p,{children:["The following configuration entry sets the weight of ",(0,t.jsx)(i.code,{children:"vcore"})," to ",(0,t.jsx)(i.code,{children:"4.0"})," and ",(0,t.jsx)(i.code,{children:"memory"})," to ",(0,t.jsx)(i.code,{children:"1.0"})," for the partition ",(0,t.jsx)(i.code,{children:"default"}),".\nThis will weight CPU usage four times higher than memory usage:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"partitions:\n  - name: default\n    nodesortpolicy:\n      type: fair\n      resourceweights:\n        vcore: 4.0\n        memory: 1.0\n"})}),"\n",(0,t.jsxs)(i.p,{children:["With this configuration, In this example, if a node has ",(0,t.jsx)(i.code,{children:"90%"})," of its CPU and ",(0,t.jsx)(i.code,{children:"50%"})," of its memory allocated, the node\nwill be considered to be ",(0,t.jsx)(i.code,{children:"82%"})," utilized."]}),"\n",(0,t.jsxs)(i.p,{children:["Note that weights are relative to each other, so specifying weights of ",(0,t.jsx)(i.code,{children:"{ 4.0, 1.0 }"})," is equivalent to\n",(0,t.jsx)(i.code,{children:"{ 1.0, 0.25 }"}),". Negative weights are not allowed."]}),"\n",(0,t.jsx)(i.h2,{id:"request-sorting",children:"Request sorting"}),"\n",(0,t.jsx)(i.p,{children:"There is currently one policy for sorting requests within an application.\nThis policy is not configurable.\nSorting requests is only possible based on the priority of the request.\nIf there are multiple requests within an application that have the same priority the order of the requests is undetermined.\nThis means that the order of requests with the same priority can, and most likely will, change between runs."})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1780:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var t=n(79474);const s={},o=t.createContext(s);function r(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);