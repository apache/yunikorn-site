"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[95316],{15680:(e,n,l)=>{l.d(n,{xA:()=>p,yg:()=>m});var a=l(96540);function t(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function i(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,a)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?i(Object(l),!0).forEach((function(n){t(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function o(e,n){if(null==e)return{};var l,a,t=function(e,n){if(null==e)return{};var l,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)l=i[a],n.indexOf(l)>=0||(t[l]=e[l]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)l=i[a],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(t[l]=e[l])}return t}var s=a.createContext({}),u=function(e){var n=a.useContext(s),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var l=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=u(l),d=t,m=g["".concat(s,".").concat(d)]||g[d]||c[d]||i;return l?a.createElement(m,r(r({ref:n},p),{},{components:l})):a.createElement(m,r({ref:n},p))}));function m(e,n){var l=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=l.length,r=new Array(i);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[g]="string"==typeof e?e:t,r[1]=o;for(var u=2;u<i;u++)r[u]=l[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,l)}d.displayName="MDXCreateElement"},3139:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=l(58168),t=(l(96540),l(15680));const i={id:"service_config",title:"Service Configuration"},r=void 0,o={unversionedId:"user_guide/service_config",id:"version-1.3.0/user_guide/service_config",title:"Service Configuration",description:"\x3c!--",source:"@site/versioned_docs/version-1.3.0/user_guide/service_config.md",sourceDirName:"user_guide",slug:"/user_guide/service_config",permalink:"/docs/1.3.0/user_guide/service_config",draft:!1,tags:[],version:"1.3.0",frontMatter:{id:"service_config",title:"Service Configuration"},sidebar:"docs",previous:{title:"Deployment Modes",permalink:"/docs/1.3.0/user_guide/deployment_modes"},next:{title:"Partition and Queue Configuration",permalink:"/docs/1.3.0/user_guide/queue_config"}},s={},u=[{value:"Helm Configuration",id:"helm-configuration",level:2},{value:"Container images",id:"container-images",level:3},{value:"Kubernetes configuration",id:"kubernetes-configuration",level:3},{value:"affinity",id:"affinity",level:4},{value:"admissionController.affinity",id:"admissioncontrolleraffinity",level:4},{value:"hostNetwork",id:"hostnetwork",level:4},{value:"admissionController.hostNetwork",id:"admissioncontrollerhostnetwork",level:4},{value:"imagePullSecrets",id:"imagepullsecrets",level:4},{value:"nodeSelector",id:"nodeselector",level:4},{value:"admissionController.nodeSelector",id:"admissioncontrollernodeselector",level:4},{value:"admissionController.replicaCount",id:"admissioncontrollerreplicacount",level:4},{value:"serviceAccount",id:"serviceaccount",level:4},{value:"admissionController.serviceAccount",id:"admissioncontrollerserviceaccount",level:4},{value:"service.type",id:"servicetype",level:4},{value:"admissionController.service.type",id:"admissioncontrollerservicetype",level:4},{value:"service.port",id:"serviceport",level:4},{value:"service.portWeb",id:"serviceportweb",level:4},{value:"tolerations",id:"tolerations",level:4},{value:"admissionController.tolerations",id:"admissioncontrollertolerations",level:4},{value:"Resource utilization",id:"resource-utilization",level:3},{value:"Optional features",id:"optional-features",level:3},{value:"embedAdmissionController",id:"embedadmissioncontroller",level:4},{value:"enableSchedulerPlugin",id:"enableschedulerplugin",level:4},{value:"YuniKorn defaults",id:"yunikorn-defaults",level:3},{value:"yunikornDefaults",id:"yunikorndefaults",level:4},{value:"Deprecated settings",id:"deprecated-settings",level:3},{value:"YuniKorn Configuration",id:"yunikorn-configuration",level:2},{value:"Default ConfigMap",id:"default-configmap",level:3},{value:"Service settings",id:"service-settings",level:3},{value:"service.clusterId",id:"serviceclusterid",level:4},{value:"service.policyGroup",id:"servicepolicygroup",level:4},{value:"service.schedulingInterval",id:"serviceschedulinginterval",level:4},{value:"service.volumeBindTimeout",id:"servicevolumebindtimeout",level:4},{value:"service.eventChannelCapacity",id:"serviceeventchannelcapacity",level:4},{value:"service.dispatchTimeout",id:"servicedispatchtimeout",level:4},{value:"service.operatorPlugins",id:"serviceoperatorplugins",level:4},{value:"service.disableGangScheduling",id:"servicedisablegangscheduling",level:4},{value:"service.enableConfigHotRefresh",id:"serviceenableconfighotrefresh",level:4},{value:"service.placeholderImage",id:"serviceplaceholderimage",level:4},{value:"service.instanceTypeNodeLabelKey",id:"serviceinstancetypenodelabelkey",level:4},{value:"Health settings",id:"health-settings",level:3},{value:"health.checkInterval",id:"healthcheckinterval",level:4},{value:"Log settings",id:"log-settings",level:3},{value:"log.level",id:"loglevel",level:4},{value:"Kubernetes settings",id:"kubernetes-settings",level:3},{value:"kubernetes.qps",id:"kubernetesqps",level:4},{value:"kubernetes.burst",id:"kubernetesburst",level:4},{value:"Admission controller webhook settings",id:"admission-controller-webhook-settings",level:3},{value:"admissionController.webHook.amServiceName",id:"admissioncontrollerwebhookamservicename",level:4},{value:"admissionController.webHook.schedulerServiceAddress",id:"admissioncontrollerwebhookschedulerserviceaddress",level:4},{value:"Admission controller filtering settings",id:"admission-controller-filtering-settings",level:3},{value:"admissionController.filtering.processNamespaces",id:"admissioncontrollerfilteringprocessnamespaces",level:4},{value:"admissionController.filtering.bypassNamespaces",id:"admissioncontrollerfilteringbypassnamespaces",level:4},{value:"admissionController.filtering.labelNamespaces",id:"admissioncontrollerfilteringlabelnamespaces",level:4},{value:"admissionController.filtering.noLabelNamespaces",id:"admissioncontrollerfilteringnolabelnamespaces",level:4},{value:"admissionController.filtering.generateUniqueAppId",id:"admissioncontrollerfilteringgenerateuniqueappid",level:4},{value:"admissionController.filtering.defaultQueue",id:"admissioncontrollerfilteringdefaultqueue",level:4},{value:"Admission controller ACL settings",id:"admission-controller-acl-settings",level:3},{value:"admissionController.accessControl.bypassAuth",id:"admissioncontrolleraccesscontrolbypassauth",level:4},{value:"admissionController.accessControl.trustControllers",id:"admissioncontrolleraccesscontroltrustcontrollers",level:4},{value:"admissionController.accessControl.systemUsers",id:"admissioncontrolleraccesscontrolsystemusers",level:4},{value:"admissionController.accessControl.externalUsers",id:"admissioncontrolleraccesscontrolexternalusers",level:4},{value:"admissionController.accessControl.externalGroups",id:"admissioncontrolleraccesscontrolexternalgroups",level:4}],p={toc:u},g="wrapper";function c(e){let{components:n,...l}=e;return(0,t.yg)(g,(0,a.A)({},p,l,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"The official distribution of YuniKorn is deployed via Helm charts to\nKubernetes. Configuration for YuniKorn is split into two parts: Helm\nconfiguration, and YuniKorn service configuration."),(0,t.yg)("h2",{id:"helm-configuration"},"Helm Configuration"),(0,t.yg)("p",null,"Helm configuration is used to configure options for the deployment of\nYuniKorn to Kubernetes."),(0,t.yg)("p",null,"The following settings can be configured during YuniKorn installation\nvia Helm, either via Helm's command-line, as in ",(0,t.yg)("inlineCode",{parentName:"p"},"--set key=value"),", or\nvia an external file: ",(0,t.yg)("inlineCode",{parentName:"p"},"-f file.yaml"),". The examples below will be given in\nYAML syntax."),(0,t.yg)("h3",{id:"container-images"},"Container images"),(0,t.yg)("p",null,"YuniKorn ships as a set of container images. The locations and pull\npolicies can be customized as follows:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"# Image information for the standard scheduler\nimage:\n  repository: apache/yunikorn\n  tag: scheduler-1.0.0          # default depends on YuniKorn version\n  pullPolicy: Always\n\n# Image information for the plugin scheduler\npluginImage:\n  repository: apache/yunikorn\n  tag: scheduler-plugin-1.0.0   # default depends on YuniKorn version\n  pullPolicy: Always\n\n# Image information for the web UI\nweb:\n  image:\n    repository: apache/yunikorn\n    tag: web-1.0.0              # default depends on YuniKorn version\n    pullPolicy: Always\n\n# Image information for the admission controller\nadmissionController:\n  image:\n    repository: apache/yunikorn\n    tag: admission-1.0.0        # default depends on YuniKorn version\n    pullPolicy: Always\n")),(0,t.yg)("h3",{id:"kubernetes-configuration"},"Kubernetes configuration"),(0,t.yg)("h4",{id:"affinity"},"affinity"),(0,t.yg)("p",null,"Sets the affinity for the YuniKorn scheduler pod."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"affinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: In\n            values:\n              - primary1\n              - primary2\n")),(0,t.yg)("h4",{id:"admissioncontrolleraffinity"},"admissionController.affinity"),(0,t.yg)("p",null,"Sets the affinity for the YuniKorn admission controller pod."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"admissionController:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: kubernetes.io/hostname\n              operator: In\n              values:\n                - primary1\n                - primary2\n")),(0,t.yg)("h4",{id:"hostnetwork"},"hostNetwork"),(0,t.yg)("p",null,"Controls whether the scheduler should run in the host network."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"false")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"hostNetwork: true\n")),(0,t.yg)("h4",{id:"admissioncontrollerhostnetwork"},"admissionController.hostNetwork"),(0,t.yg)("p",null,"Controls whether the admission controller should run in the host network."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"true")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"admissionController:\n  hostNetwork: false\n")),(0,t.yg)("h4",{id:"imagepullsecrets"},"imagePullSecrets"),(0,t.yg)("p",null,"Provides secrets needed for pulling YuniKorn images."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"[]")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"imagePullSecrets:\n  - secret1\n  - secret2\n")),(0,t.yg)("h4",{id:"nodeselector"},"nodeSelector"),(0,t.yg)("p",null,"Sets a node selector(s) to use for placement of the YuniKorn scheduler pod."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'nodeSelector:\n  node-role.kubernetes.io/control-plane: "true"\n')),(0,t.yg)("h4",{id:"admissioncontrollernodeselector"},"admissionController.nodeSelector"),(0,t.yg)("p",null,"Sets a node selector(s) to use for placement of the YuniKorn admission controller pod."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController:\n  nodeSelector:\n    node-role.kubernetes.io/control-plane: "true"\n')),(0,t.yg)("h4",{id:"admissioncontrollerreplicacount"},"admissionController.replicaCount"),(0,t.yg)("p",null,"Sets the number of replicas to use for the YuniKorn admission controller. This\ncan be set to greater than 1 for high-availability."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"1")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"admissionController:\n  replicaCount: 2\n")),(0,t.yg)("h4",{id:"serviceaccount"},"serviceAccount"),(0,t.yg)("p",null,"Sets an alternate service account for the YuniKorn scheduler."),(0,t.yg)("p",null,"Changing this value is not recommended, as Helm installs role-based access\ncontrol (RBAC) policies for the default user that are required for proper\nfunctionaliy."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-admin")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"serviceAccount: my-account\n")),(0,t.yg)("h4",{id:"admissioncontrollerserviceaccount"},"admissionController.serviceAccount"),(0,t.yg)("p",null,"Sets an alternate service account for the YuniKorn admission controller."),(0,t.yg)("p",null,"Changing this value is not recommended, as Helm installs role-based access\ncontrol (RBAC) policies for the default user that are required for proper\nfunctionaliy."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-admission-controller")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"admissionController:\n  serviceAccount: my-account\n")),(0,t.yg)("h4",{id:"servicetype"},"service.type"),(0,t.yg)("p",null,"Sets the type of service used for the scheduler."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"ClusterIP")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"service:\n  type: ClusterIP\n")),(0,t.yg)("h4",{id:"admissioncontrollerservicetype"},"admissionController.service.type"),(0,t.yg)("p",null,"Sets the type of service used for the admission controller."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"ClusterIP")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"admissionController:\n  service:\n    type: ClusterIP\n")),(0,t.yg)("h4",{id:"serviceport"},"service.port"),(0,t.yg)("p",null,"Sets the port exposed in the YuniKorn scheduler service for the REST API.\nIt is not recommended to change this value."),(0,t.yg)("p",null,"Default: 9080"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"service:\n  port: 9080\n")),(0,t.yg)("h4",{id:"serviceportweb"},"service.portWeb"),(0,t.yg)("p",null,"Sets the port exposed in the YuniKorn scheduler service for the Web UI.\nIt is not recommended to change this value."),(0,t.yg)("p",null,"Default: 9889"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"service:\n  portWeb: 9889\n")),(0,t.yg)("h4",{id:"tolerations"},"tolerations"),(0,t.yg)("p",null,"Sets the tolerations for the YuniKorn scheduler pod."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"[]")),(0,t.yg)("p",null,"Example: "),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'tolerations:\n  - key: node-role.kubernetes.io/control-plane\n    operator: Equal\n    value: "true"\n    effect: NoSchedule\n  - key: CriticalAddonsOnly\n    operator: Exists\n')),(0,t.yg)("h4",{id:"admissioncontrollertolerations"},"admissionController.tolerations"),(0,t.yg)("p",null,"Sets the tolerations for the YuniKorn admission controller pod."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"[]")),(0,t.yg)("p",null,"Example: "),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController:\n  tolerations:\n    - key: node-role.kubernetes.io/control-plane\n      operator: Equal\n      value: "true"\n      effect: NoSchedule\n    - key: CriticalAddonsOnly\n      operator: Exists\n')),(0,t.yg)("h3",{id:"resource-utilization"},"Resource utilization"),(0,t.yg)("p",null,"The resources requested for YuniKorn pods can be customized as follows:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"# Scheduler container resources\nresources:\n  requests:\n    cpu: 200m\n    memory: 1Gi\n  limits:\n    cpu: 4\n    memory: 2Gi\n\n# Web UI container resources\nweb:\n  resources:\n    requests:\n      cpu: 100m\n      memory: 100Mi\n    limits:\n      cpu: 100m\n      memory: 500Mi\n\n# Admission controller resources\nadmissionController:\n  resources:\n    requests:\n      cpu: 100m\n      memory: 500Mi\n    limits:\n      cpu: 500m\n      memory: 500Mi\n")),(0,t.yg)("h3",{id:"optional-features"},"Optional features"),(0,t.yg)("h4",{id:"embedadmissioncontroller"},"embedAdmissionController"),(0,t.yg)("p",null,"Controls whether to enable the YuniKorn admission controller."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"true")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"embedAdmissionController: false\n")),(0,t.yg)("h4",{id:"enableschedulerplugin"},"enableSchedulerPlugin"),(0,t.yg)("p",null,"Controls whether to run YuniKorn in scheduler plugin mode."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"false")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"enableSchedulerPlugin: true\n")),(0,t.yg)("h3",{id:"yunikorn-defaults"},"YuniKorn defaults"),(0,t.yg)("h4",{id:"yunikorndefaults"},"yunikornDefaults"),(0,t.yg)("p",null,"Sets entries which will be rendered to the ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-defaults")," ConfigMap. This\ncan be used to pre-configure YuniKorn at deployment time. Any settings\ndeclared in ",(0,t.yg)("a",{parentName:"p",href:"#yunikorn-configuration"},"YuniKorn configuration")," may be set here."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"yunikornDefaults:\n    service.clusterId: yunikorn-01\n    service.policyGroup: group-01\n    group-01.yaml: |\n      partitions:\n        - name: default\n          placementrules:\n            - name: tag\n              value: namespace\n              create: true\n          queues:\n        - name: root\n          submitacl: '*'\n")),(0,t.yg)("h3",{id:"deprecated-settings"},"Deprecated settings"),(0,t.yg)("p",null,"The following settings are deprecated, and will be removed from a future\nYuniKorn release. They should now be specified in the ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-configs")," ConfigMap\nor via the Helm ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikornDefaults")," section:"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Deprecated setting"),(0,t.yg)("th",{parentName:"tr",align:null},"ConfigMap replacement"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"operatorPlugins"),(0,t.yg)("td",{parentName:"tr",align:null},"service.operatorPlugins")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"placeHolderImage"),(0,t.yg)("td",{parentName:"tr",align:null},"service.placeholderImage")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"admissionController: processNamespaces"),(0,t.yg)("td",{parentName:"tr",align:null},"admissionController.filtering.processNamespaces")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"admissionController: bypassNamespaces"),(0,t.yg)("td",{parentName:"tr",align:null},"admissionController.filtering.bypassNamespaces")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"admissionController: labelNamespaces"),(0,t.yg)("td",{parentName:"tr",align:null},"admissionController.filtering.labelNamespaces")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"admissionController: noLabelNamespaces"),(0,t.yg)("td",{parentName:"tr",align:null},"admissionController.filtering.noLabelNamespaces")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"configuration"),(0,t.yg)("td",{parentName:"tr",align:null},"queues.yaml")))),(0,t.yg)("p",null,"Deprecated example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'operatorPlugins: general\nplaceHolderImage: registry.k8s.io/pause:3.7\nadmissionController:\n  processNamespaces: "^spark-,^mpi-"\n  bypassNamespaces: "^kube-system$"\n  labelNamespaces: "^spark-"\n  noLabelNamespaces: "^mpi-legacy-"\nconfiguration: |\n  partitions:\n    - name: default\n      placementrules:\n        - name: tag\n          value: namespace\n          create: true\n      queues:\n    - name: root\n      submitacl: \'*\'\n')),(0,t.yg)("p",null,"Replacement example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'yunikornDefaults:\n  service.policyGroup: queues\n  service.operatorPlugins: general\n  service.placeholderImage: registry.k8s.io/pause:3.7\n  admissionController.filtering.processNamespaces: "^spark-,^mpi-"\n  admissionController.filtering.bypassNamespaces: "^kube-system$"\n  admissionController.filtering.labelNamespaces: "^spark-"\n  admissionController.filtering.noLabelNamespaces: "^mpi-legacy-"\n  queues.yaml: |\n    partitions:\n      - name: default\n        placementrules:\n          - name: tag\n            value: namespace\n            create: true\n        queues:\n      - name: root\n        submitacl: \'*\'\n')),(0,t.yg)("p",null,"Currently, if both the deprecated parameter and the replacement ConfigMap entry are specified, the ConfigMap entry will take precedence."),(0,t.yg)("h2",{id:"yunikorn-configuration"},"YuniKorn Configuration"),(0,t.yg)("p",null,"Service configuration for YuniKorn is controlled by two Kubernetes ConfigMaps\nin the namespace where YuniKorn is installed: ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-defaults")," and\n",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-configs"),"."),(0,t.yg)("p",null,"At runtime, these ConfigMaps are polled by YuniKorn and merged together to form an\neffective configuration. If a setting is present in both ConfigMaps, the\n",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-configs")," setting will override the one present in ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-defaults"),"."),(0,t.yg)("p",null,"The purpose of ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-defaults")," is to provide a mechanism for Helm to configure\ninitial service configuration details. It should not be modified directly."),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-configs")," ConfigMap is completely unmanaged by Helm, and is meant for\nconfigurations which may change over time, such as queue configuration. All changes\nto YuniKorn configuration outside of provisioning infrastructure should be made here."),(0,t.yg)("h3",{id:"default-configmap"},"Default ConfigMap"),(0,t.yg)("p",null,"If neither ConfigMap is provided, or if an option is not specified, YuniKorn will\nuse the default values listed here:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: yunikorn-configs\ndata:\n  service.clusterId: "mycluster"\n  service.policyGroup: "queues"\n  service.schedulingInterval: "1s"\n  service.volumeBindTimeout: "10s"\n  service.eventChannelCapacity: "1048576"\n  service.dispatchTimeout: "5m"\n  service.operatorPlugins: "general"\n  service.disableGangScheduling: "false"\n  service.enableConfigHotRefresh: "true"\n  service.placeholderImage: "registry.k8s.io/pause:3.7"\n  service.instanceTypeNodeLabelKey: "node.kubernetes.io/instance-type"\n  health.checkInterval: "30s"\n  log.level: "0"\n  kubernetes.qps: "1000"\n  kubernetes.burst: "1000"\n  admissionController.webHook.amServiceName: "yunikorn-admission-controller-service"\n  admissionController.webHook.schedulerServiceAddress: "yunikorn-service:9080"\n  admissionController.filtering.processNamespaces: ""\n  admissionController.filtering.bypassNamespaces: "^kube-system$"\n  admissionController.filtering.labelNamespaces: ""\n  admissionController.filtering.noLabelNamespaces: ""\n  admissionController.filtering.generateUniqueAppId: "false"\n  admissionController.filtering.defaultQueue: "root.default"\n  admissionController.accessControl.bypassAuth: "false"\n  admissionController.accessControl.trustControllers: "true"\n  admissionController.accessControl.systemUsers: "^system:serviceaccount:kube-system:"\n  admissionController.accessControl.externalUsers: ""\n  admissionController.accessControl.externalGroups: ""\n  queues.yaml: |\n    partitions:\n      - name: default\n        placementrules:\n          - name: tag\n            value: namespace\n            create: true\n        queues:\n          - name: root\n            submitacl: \'*\'\n')),(0,t.yg)("h3",{id:"service-settings"},"Service settings"),(0,t.yg)("p",null,"The following parameters are understood by YuniKorn:"),(0,t.yg)("h4",{id:"serviceclusterid"},"service.clusterId"),(0,t.yg)("p",null,"Sets an identifier for the cluster being configured. This is returned as part\nof REST API calls."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"mycluster")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.clusterId: "yunikorn-east"\n')),(0,t.yg)("h4",{id:"servicepolicygroup"},"service.policyGroup"),(0,t.yg)("p",null,"Defines the policy group in use by this scheduler. The policy group is used to\nchoose one of several queue configurations. The value of this setting plus an\nextension of ",(0,t.yg)("inlineCode",{parentName:"p"},".yaml")," controls the ConfigMap entry used to retrieve partition\nand queue configuration."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"queues")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"service.policyGroup: group_b\ngroup_b.yaml: |\n    partitions:\n      - name: default\n        placementrules:\n          - name: tag\n            value: namespace\n            create: true\n        queues:\n          - name: root\n            submitacl: '*'\n")),(0,t.yg)("h4",{id:"serviceschedulinginterval"},"service.schedulingInterval"),(0,t.yg)("p",null,"Controls the frequency with which YuniKorn executes scheduling runs."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"1s")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.schedulingInterval: "5s"\n')),(0,t.yg)("h4",{id:"servicevolumebindtimeout"},"service.volumeBindTimeout"),(0,t.yg)("p",null,"Controls the timeout before volume binding fails."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"10s")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.volumeBindTimeout: "30s"\n')),(0,t.yg)("h4",{id:"serviceeventchannelcapacity"},"service.eventChannelCapacity"),(0,t.yg)("p",null,"Controls the number of internal scheduling events that YuniKorn will allow\nto be in-flight at one time. This acts as an out-of-memory guard."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"1048576")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.eventChannelCapacity: "1000000"\n')),(0,t.yg)("h4",{id:"servicedispatchtimeout"},"service.dispatchTimeout"),(0,t.yg)("p",null,"Controls how long internal events will reattempt dispatching if the event\nchannel is full. Warnings will be emitted if this timeout is exceeded."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"5m")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.dispatchTimeout: "10m"\n')),(0,t.yg)("h4",{id:"serviceoperatorplugins"},"service.operatorPlugins"),(0,t.yg)("p",null,"Controls the set of operator plugins which are enabled within YuniKorn.\nCurrently, only the ",(0,t.yg)("inlineCode",{parentName:"p"},"general"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"spark-k8s-operator"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-app"),"\nplugins are implemented. The ",(0,t.yg)("inlineCode",{parentName:"p"},"general")," plugin should not be disabled."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"general")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.operatorPlugins: "general,spark-k8s-operator"\n')),(0,t.yg)("h4",{id:"servicedisablegangscheduling"},"service.disableGangScheduling"),(0,t.yg)("p",null,"Allows global disabling of the gang scheduling feature (not recommended)."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"false")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.disableGangScheduling: "true"\n')),(0,t.yg)("h4",{id:"serviceenableconfighotrefresh"},"service.enableConfigHotRefresh"),(0,t.yg)("p",null,"Controls whether configuration should be hot-reloaded. By default, this\nis set to ",(0,t.yg)("inlineCode",{parentName:"p"},"true"),", but it can be disabled to avoid changes to the\nConfigMaps from being picked up until a scheduler restart."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of YuniKorn."),(0,t.yg)("p",null,"NOTE: If this setting is disabled, it may not be re-enabled again without\na restart of YuniKorn."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"true")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.enableConfigHotRefresh: "false"\n')),(0,t.yg)("h4",{id:"serviceplaceholderimage"},"service.placeholderImage"),(0,t.yg)("p",null,"Sets the Pod image that will be used for gang scheduling placeholders."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"registry.k8s.io/pause:3.7")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.placeholderImage: "registry.k8s.io/pause:3.6"\n')),(0,t.yg)("h4",{id:"serviceinstancetypenodelabelkey"},"service.instanceTypeNodeLabelKey"),(0,t.yg)("p",null,"Sets the node label that will be used to determine the instance type of node."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"node.kubernetes.io/instance-type")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'service.instanceTypeNodeLabelKey: "node.kubernetes.io/my-instance-type"\n')),(0,t.yg)("h3",{id:"health-settings"},"Health settings"),(0,t.yg)("h4",{id:"healthcheckinterval"},"health.checkInterval"),(0,t.yg)("p",null,"Sets the time between automatic health checks of YuniKorn."),(0,t.yg)("p",null,"Setting the value to ",(0,t.yg)("inlineCode",{parentName:"p"},"0")," or a negative interval will disable background health\nchecking."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of YuniKorn."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"30s")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'health.checkInterval: "1m"\n')),(0,t.yg)("h3",{id:"log-settings"},"Log settings"),(0,t.yg)("h4",{id:"loglevel"},"log.level"),(0,t.yg)("p",null,"Sets the verbosity that YuniKorn will log at."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of YuniKorn. The available\nvalues are:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"-1"),": Debug"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"0"),": Info"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"1"),": Warn"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"2"),": Error"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"3"),": DPanic"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"4"),": Panic"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"5"),": Fatal")),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"0")," (Info)"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'log.level: "-1"\n')),(0,t.yg)("h3",{id:"kubernetes-settings"},"Kubernetes settings"),(0,t.yg)("h4",{id:"kubernetesqps"},"kubernetes.qps"),(0,t.yg)("p",null,"Sets the number of Kubernetes queries per second (QPS) used by YuniKorn's\nKubernetes client. This number must be >= 0."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"1000")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'kubernetes.qps: "500"\n')),(0,t.yg)("h4",{id:"kubernetesburst"},"kubernetes.burst"),(0,t.yg)("p",null,"Sets the maximum size of bursty queries to Kubernetes, temporarily allowing\nevents to burst to this number while not still exceeding ",(0,t.yg)("inlineCode",{parentName:"p"},"kubernetes.qps"),"."),(0,t.yg)("p",null,"A change to this setting requires a restart of YuniKorn to take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"1000")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'kubernetes.burst: "500"\n')),(0,t.yg)("h3",{id:"admission-controller-webhook-settings"},"Admission controller webhook settings"),(0,t.yg)("h4",{id:"admissioncontrollerwebhookamservicename"},"admissionController.webHook.amServiceName"),(0,t.yg)("p",null,"Sets the name of the service that the YuniKorn admission controller is\nregistered under. This is required for the admission controller to register\nitself properly with Kubernetes, and should normally not be changed."),(0,t.yg)("p",null,"A change to this setting requires a restart of the YuniKorn admission controller\nto take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-admission-controller-service")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController.webHook.amServiceName: "yunikorn-admission-controller-alt-service-name"\n')),(0,t.yg)("h4",{id:"admissioncontrollerwebhookschedulerserviceaddress"},"admissionController.webHook.schedulerServiceAddress"),(0,t.yg)("p",null,"Sets the address of the YuniKorn scheduler service. This address must be\nreachable by the admission controller, and is used by the admission\ncontroller when validating ConfigMap changes. The admission controller\nwill contact the REST API on the scheduler to validate any proposed\nConfigMap changes. This setting should not normally be changed."),(0,t.yg)("p",null,"A change to this setting requires a restart of the YuniKorn admission controller\nto take effect."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn-service:9080")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController.webHook.schedulerServiceAddress: "alt-yunikorn-service:9080"\n')),(0,t.yg)("h3",{id:"admission-controller-filtering-settings"},"Admission controller filtering settings"),(0,t.yg)("h4",{id:"admissioncontrollerfilteringprocessnamespaces"},"admissionController.filtering.processNamespaces"),(0,t.yg)("p",null,"Controls which namespaces will have pods forwarded to YuniKorn for scheduling."),(0,t.yg)("p",null,"This setting is a comma-separated list of regular expressions. If this setting\nis an empty string, pods created in all namespaces will be scheduled by YuniKorn."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: empty"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# Schedule only pods in spark-* and mpi-* namespaces with YuniKorn\nadmissionController.filtering.processNamespaces: "^spark-,^mpi-"\n')),(0,t.yg)("h4",{id:"admissioncontrollerfilteringbypassnamespaces"},"admissionController.filtering.bypassNamespaces"),(0,t.yg)("p",null,"Controls which namespaces will ",(0,t.yg)("em",{parentName:"p"},"not")," have pods forwarded to YuniKorn for scheduling.\nThis acts as an exception list to ",(0,t.yg)("inlineCode",{parentName:"p"},"admissionController.filtering.processNamespaces"),"."),(0,t.yg)("p",null,"This setting is a comma-separated list of regular expressions. If this setting\nis an empty string, no pods in any namespaces will be excluded from processing by\nYuniKorn."),(0,t.yg)("p",null,"By default, this setting excludes pods in the ",(0,t.yg)("inlineCode",{parentName:"p"},"kube-system")," namespace as scheduling\nof these pods is often required for a node to be added to a cluster successfully.\nThis could possibly prevent starting of YuniKorn itself or other critical services."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"^kube-system$")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# Don\'t schedule pods in kube-system or fluentd-* namespaces\nadmissionController.filtering.bypassNamespaces: "^kube-system$,^fluentd-"\n')),(0,t.yg)("blockquote",null,(0,t.yg)("p",{parentName:"blockquote"},(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"NOTE :")),(0,t.yg)("br",{parentName:"p"}),"\n","To simplify management, you can directly set the ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn.apache.org/namespace.enableYunikorn")," annotation on the namespace itself, regardless of whether it is specified in a regular expression. This annotation enables you to determine if the namespace should be managed by Yunikorn.")),(0,t.yg)("h4",{id:"admissioncontrollerfilteringlabelnamespaces"},"admissionController.filtering.labelNamespaces"),(0,t.yg)("p",null,"Controls which namespaces will have pods labeled with an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId"),". By default,\nall pods which are scheduled by YuniKorn will have an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," label applied."),(0,t.yg)("p",null,"When running YuniKorn using the standard deployment model, all pods should be labeled,\nas YuniKorn is unable to schedule pods without an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," defined."),(0,t.yg)("p",null,"When running YuniKorn using the scheduler plugin deployment model, this setting can\nbe used to filter which namespaces should be scheduled via YuniKorn's queueing model,\nand which should bypass queueing and be scheduled by the embedded default scheduler."),(0,t.yg)("p",null,"This setting is a comma-separated list of regular expressions. If this setting\nis an empty string, all pods forwarded to YuniKorn will have an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," label\napplied."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: empty"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# Add applicationId labels to pods spark-* namespaces\nadmissionController.filtering.labelNamespaces: "^spark-"\n')),(0,t.yg)("h4",{id:"admissioncontrollerfilteringnolabelnamespaces"},"admissionController.filtering.noLabelNamespaces"),(0,t.yg)("p",null,"Controls which namespaces will ",(0,t.yg)("em",{parentName:"p"},"not")," have pods labeled with an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId"),". This\nacts as an exception list to ",(0,t.yg)("inlineCode",{parentName:"p"},"admissionController.filtering.labelNamespaces"),"."),(0,t.yg)("p",null,"When running YuniKorn using the standard deployment model, all pods should be labeled,\nas YuniKorn is unable to schedule pods without an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," defined."),(0,t.yg)("p",null,"When running YuniKorn using the scheduler plugin deployment model, this setting can\nbe used to filter which namespaces should be scheduled via YuniKorn's queueing model,\nand which should bypass queueing and be scheduled by the embedded default scheduler."),(0,t.yg)("p",null,"This setting is a comma-separated list of regular expressions. If this setting\nis an empty string, no exclusions to ",(0,t.yg)("inlineCode",{parentName:"p"},"admissionController.filtering.labelNamespaces")," will\nbe applied."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: empty"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# Skip queueing in the noqueue namespace\nadmissionController.filtering.labelNamespaces: "^noqueue$"\n')),(0,t.yg)("blockquote",null,(0,t.yg)("p",{parentName:"blockquote"},(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"NOTE :")),"\nTo simplify management, you can directly set the ",(0,t.yg)("inlineCode",{parentName:"p"},"yunikorn.apache.org/namespace.generateAppId")," annotation on the namespace itself, regardless of whether it is specified in a regular expression. This annotation enables you to determine if the namespace should be labeled by Yunikorn.")),(0,t.yg)("h4",{id:"admissioncontrollerfilteringgenerateuniqueappid"},"admissionController.filtering.generateUniqueAppId"),(0,t.yg)("p",null,"YuniKorn generates ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," for all the apps that do not have an ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," to start with. This property controls if a ",(0,t.yg)("em",{parentName:"p"},"unique")," ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," should be generated for each such application or all the apps in a namespace should be bundled under a single ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId"),"."),(0,t.yg)("p",null,"This setting is turned off by default and only one ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," will be generated per namespace."),(0,t.yg)("p",null,"When enabled, unique ",(0,t.yg)("inlineCode",{parentName:"p"},"applicationId")," is generated using the namespace and the application's pod uid."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"false")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController.filtering.generateUniqueAppId: "true"\n')),(0,t.yg)("h4",{id:"admissioncontrollerfilteringdefaultqueue"},"admissionController.filtering.defaultQueue"),(0,t.yg)("p",null,"Controlls what will be the default queue name for the application."),(0,t.yg)("p",null,"If the application does not define a queue name during app submission, admission controller will add a default queue name to the pod labels. ",(0,t.yg)("inlineCode",{parentName:"p"},"root.default")," queue name will be added to the pod labels if this property is not set."),(0,t.yg)("p",null,"In case, the default queue name needs to be updated to something other than ",(0,t.yg)("inlineCode",{parentName:"p"},"root.default"),",  ",(0,t.yg)("inlineCode",{parentName:"p"},"admissionController.filtering.defaultQueue")," can be set with the desired queue name."),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# Change default queue to root.mydefault\nadmissionController.filtering.defaultQueue: "root.mydefault"\n')),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"NOTE :")),"\nThe queue name needs to be a fully qualified queue name."),(0,t.yg)("p",null,"For certain use-cases, there may be a need to skip adding a default queue name to the pod labels. In such cases, ",(0,t.yg)("inlineCode",{parentName:"p"},"admissionController.filtering.defaultQueue")," can be set to empty string."),(0,t.yg)("p",null,"Adding default queue name should be avoided when ",(0,t.yg)("inlineCode",{parentName:"p"},"provided")," rule is used in conjunction with other placement rules and ",(0,t.yg)("inlineCode",{parentName:"p"},"provided")," rule is higher in the hierarchy. If default queue label is added whenever there is no queue name specified, all the apps will be placed via ",(0,t.yg)("inlineCode",{parentName:"p"},"provided")," rule and the other rules after that will never be executed."),(0,t.yg)("p",null,"Default: empty"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# Skip adding default queue name\nadmissionController.filtering.defaultQueue: ""\n')),(0,t.yg)("h3",{id:"admission-controller-acl-settings"},"Admission controller ACL settings"),(0,t.yg)("h4",{id:"admissioncontrolleraccesscontrolbypassauth"},"admissionController.accessControl.bypassAuth"),(0,t.yg)("p",null,"Allow external users to create pods with user information already set."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"false")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController.accessControl.bypassAuth: "true"\n')),(0,t.yg)("h4",{id:"admissioncontrolleraccesscontroltrustcontrollers"},"admissionController.accessControl.trustControllers"),(0,t.yg)("p",null,"Allow controller users to create pods with user information already set."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"true")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'admissionController.accessControl.trustControllers: "false"\n')),(0,t.yg)("h4",{id:"admissioncontrolleraccesscontrolsystemusers"},"admissionController.accessControl.systemUsers"),(0,t.yg)("p",null,"Comma-separated list of regular expressions that match allowed controller\nservice accounts."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: ",(0,t.yg)("inlineCode",{parentName:"p"},"^system:serviceaccount:kube-system:")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# allow all kube-system accounts as well as kube-controller-manager\nadmissionController.accessControl.systemUsers: "^system:serviceaccount:kube-system,^system:kube-controller-manager$"\n')),(0,t.yg)("h4",{id:"admissioncontrolleraccesscontrolexternalusers"},"admissionController.accessControl.externalUsers"),(0,t.yg)("p",null,"Comma-separated list of regular expressions that match allowed external users."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: empty"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"# allow 'alice', 'bob', and 'admin-*'\nadmissionController.accessControl.externalUsers: \"^alice$,^bob$,^admin-\"\n")),(0,t.yg)("h4",{id:"admissioncontrolleraccesscontrolexternalgroups"},"admissionController.accessControl.externalGroups"),(0,t.yg)("p",null,"Comma-separated list of regular expressions that match allowed external groups."),(0,t.yg)("p",null,"A change to this setting will be picked up without a restart of the admission controller."),(0,t.yg)("p",null,"Default: empty"),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},"# allow 'sales', 'marketing', and 'admin-*'\nadmissionController.accessControl.externalGroups: \"^sales$,^marketing$,^admin-\"\n")))}c.isMDXComponent=!0}}]);