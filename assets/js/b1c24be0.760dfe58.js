(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33706,81367,84795,72405,65880,31836,72780,9045,59388,22152,48866,6595,70377,12032],{10255:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-0.10.0",title:"Release Announcement v0.10.0"},a="Release Announcement v0.10.0",o={type:"mdx",permalink:"/release-announce/0.10.0",source:"@site/src/pages/release-announce/0.10.0.md",title:"Release Announcement v0.10.0",description:"\x3c!--",frontMatter:{id:"rn-0.10.0",title:"Release Announcement v0.10.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Supported Kubernetes Versions",id:"supported-kubernetes-versions",level:3},{value:"Gang Scheduling",id:"gang-scheduling",level:3},{value:"Simplify the logic in the Scheduler Core",id:"simplify-the-logic-in-the-scheduler-core",level:3},{value:"Application Tracking API and CRD Phase One",id:"application-tracking-api-and-crd-phase-one",level:3},{value:"Web UI Refurbishment",id:"web-ui-refurbishment",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v0100",children:"Release Announcement v0.10.0"}),"\n",(0,s.jsx)(n.p,{children:"It gives us great pleasure to announce that the Apache YuniKorn (Incubating) community has voted to release 0.10.0. Apache YuniKorn (Incubating) is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on the container orchestration framework for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.p,{children:"The notable feature added in this release is the Gang Scheduling, YuniKorn now can provide gang scheduling capabilities while running applications on Kubernetes. Along with that, various bug fixes and improvements are included in this release."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn (Incubating) community has fixed over 187 JIRAs in this release: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12349466",children:"YuniKorn jiras resolved in 0.10.0"})]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Tao Yang"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2021-04-09"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"supported-kubernetes-versions",children:"Supported Kubernetes Versions"}),"\n",(0,s.jsx)(n.p,{children:"From this release on, supported Kubernetes versions have been updated to 1.16.x, 1.17.x and 1.18.x. (Earlier versions support 1.13.x, 1.14.x and 1.15.x.) YuniKorn support matrix primarily supports 3 major Kubernetes versions."}),"\n",(0,s.jsx)(n.h3,{id:"gang-scheduling",children:"Gang Scheduling"}),"\n",(0,s.jsxs)(n.p,{children:["In this release, YuniKorn starts to support the Gang Scheduling. Users can apply Gang Scheduling for the applications requiring gang scheduling semantics, such as Spark, Tensorflow, Pytorch, etc. YuniKorn proactively reserves resources for gang scheduling applications, which can work more efficiently with cluster-autoscaler. The initial support has been well tested with Spark, and it can be used with the native Spark on K8s or the Spark K8s operator. For more information how to enable and use Gang Scheduling, please read the doc ",(0,s.jsx)(n.a,{href:"/docs/user_guide/gang_scheduling",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"simplify-the-logic-in-the-scheduler-core",children:"Simplify the logic in the Scheduler Core"}),"\n",(0,s.jsxs)(n.p,{children:["The community has done a major code refactoring for the scheduler core, tracked by (YUNIKORN-317)[",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-317",children:"https://issues.apache.org/jira/browse/YUNIKORN-317"}),"]."," This refactoring combines the cache and scheduler module into one that removes a lot of complexity in the code, improves the efficiency of the core scheduling logic. And as a result, it is much simpler to read and mitigates the maintenance effort."]}),"\n",(0,s.jsx)(n.h3,{id:"application-tracking-api-and-crd-phase-one",children:"Application Tracking API and CRD Phase One"}),"\n",(0,s.jsx)(n.p,{children:"This release introduces an application tracking API and K8s custom resource definition (CRD) to further improve the user experience. The CRD will be used by the app operator/job server to interact with YuniKorn, to provide a better app lifecycle management. The first phase has defined the common protocol messages and CRD object formats."}),"\n",(0,s.jsx)(n.h3,{id:"web-ui-refurbishment",children:"Web UI Refurbishment"}),"\n",(0,s.jsx)(n.p,{children:"The community has made some usability improvements for the web UI, including a redesigned web UI layout, tweaked look and feel to provide better user experience, bug fixes, etc."}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new committers Julia Kinga Marton and Tingyao Huang. We would love to see more committers joining the community and help to shape the project. In the past few months, we continue to have bi-weekly community meetings in 2 different time zones, ad-hoc meetings, offline channel discussions. The community will continue to be open."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},10596:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-0.11.0",title:"Release Announcement v0.11.0"},a="Release Announcement v0.11.0",o={type:"mdx",permalink:"/release-announce/0.11.0",source:"@site/src/pages/release-announce/0.11.0.md",title:"Release Announcement v0.11.0",description:"\x3c!--",frontMatter:{id:"rn-0.11.0",title:"Release Announcement v0.11.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Supported Kubernetes Versions",id:"supported-kubernetes-versions",level:3},{value:"Gang Scheduling enhancements",id:"gang-scheduling-enhancements",level:3},{value:"Spark operator integration",id:"spark-operator-integration",level:3},{value:"Scheduler Metrics enhancements",id:"scheduler-metrics-enhancements",level:3},{value:"User/Group Resolution",id:"usergroup-resolution",level:3},{value:"Web UI and REST API usability enhancements",id:"web-ui-and-rest-api-usability-enhancements",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v0110",children:"Release Announcement v0.11.0"}),"\n",(0,s.jsx)(n.p,{children:"It gives us great pleasure to announce that the Apache YuniKorn (Incubating) community has voted to release 0.11.0. Apache YuniKorn (Incubating) is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on the container orchestration framework for on-prem and on-cloud use cases.\nThis release has a couple of REST API, UI usability and Gang scheduling improvements."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn (Incubating) community has fixed over 110 JIRAs in this release: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12350521",children:"YuniKorn jiras resolved in 0.11.0"})]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Kinga Marton"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2021-08-18"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"supported-kubernetes-versions",children:"Supported Kubernetes Versions"}),"\n",(0,s.jsx)(n.p,{children:"In this release supported Kubernetes versions have been updated to 1.17.x, 1.18.x and 1.19.x. (Earlier versions support 1.16.x, 1.17.x and 1.18.x.) YuniKorn support matrix primarily supports 3 major Kubernetes versions."}),"\n",(0,s.jsx)(n.h3,{id:"gang-scheduling-enhancements",children:"Gang Scheduling enhancements"}),"\n",(0,s.jsxs)(n.p,{children:["The community has been made further improvements to the ",(0,s.jsx)(n.a,{href:"http://yunikorn.apache.org/docs/user_guide/gang_scheduling",children:"Gang Scheduling"})," feature. ",(0,s.jsx)(n.a,{href:"http://yunikorn.apache.org/docs/user_guide/gang_scheduling#gang-scheduling-styles",children:"Gang scheduling style"})," now can be configured per app, soft or hard. This allows the users to customize the behavior how to handle the reservation timeout. There are also lots of enhancements to improve the lifecycle management of the placeholder pods, make the cleanup more robust and reliable. More detail can be found in ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-553",children:"YUNIKORN-553"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"spark-operator-integration",children:"Spark operator integration"}),"\n",(0,s.jsxs)(n.p,{children:["By leveraging the YuniKorn's app management framework, now it is better integrated with Spark operator. YuniKorn watches spark CRD resources and reacts when necessary. It is totally transparent to use YuniKorn with Spark operator on K8s, no extra configuration needed. This feature is ready for production use. More detail can be found in ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-558",children:"YUNIKORN-558"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"scheduler-metrics-enhancements",children:"Scheduler Metrics enhancements"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn exposes core ",(0,s.jsx)(n.a,{href:"http://yunikorn.apache.org/docs/next/performance/metrics",children:"scheduling metrics"})," via Prometheus, in this release, some important metrics such as allocating_latency_seconds, long_pending_apps have been added to the system, based on which the cluster admins can create more alerts to monitor system healthy. There are more enhancements have been made to the existing metrics, such as apps/queues, to make them more readable, and better organized. Please find more details in ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-3",children:"YUNIKORN-3"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"usergroup-resolution",children:"User/Group Resolution"}),"\n",(0,s.jsxs)(n.p,{children:["With the work done in ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-649",children:"YUNIKORN-649"}),", now users can define how to retrieve user/group identity for each app, and pod. This is done via a configurable environment variable USER_LABEL_KEY, so users can specify which label will be used for YuniKorn to retrieve the user identity. The document can be found ",(0,s.jsx)(n.a,{href:"http://yunikorn.apache.org/docs/next/user_guide/usergroup_resolution",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"web-ui-and-rest-api-usability-enhancements",children:"Web UI and REST API usability enhancements"}),"\n",(0,s.jsxs)(n.p,{children:["The community has made some usability improvements for the web UI to provide better user experience. The UI has been simplified to display the useful data in the apps/nodes page, some usability bugs have been fixed. With this release, some new REST API endpoints were introduced to make it possible to fetch per partition/queue information. You can find a complete list of endpoints ",(0,s.jsx)(n.a,{href:"http://yunikorn.apache.org/docs/api/scheduler",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new committer Manikandan R and new PPMC member, Kinga Marton. We would love to see more committers joining the community and help to shape the project. In the past few months, we continue to have bi-weekly community meetings in 2 different time zones, ad-hoc meetings, offline channel discussions. The community will continue to be open."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},35046:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-0.12.1",title:"Release Announcement v0.12.1"},a="Release Announcement v0.12.1",o={type:"mdx",permalink:"/release-announce/0.12.1",source:"@site/src/pages/release-announce/0.12.1.md",title:"Release Announcement v0.12.1",description:"\x3c!--",frontMatter:{id:"rn-0.12.1",title:"Release Announcement v0.12.1"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Supported Kubernetes Versions",id:"supported-kubernetes-versions",level:3},{value:"Node Sorting Improvements",id:"node-sorting-improvements",level:3},{value:"Gang Scheduling Enhancements",id:"gang-scheduling-enhancements",level:3},{value:"Logging &amp; Observability Improvements",id:"logging--observability-improvements",level:3},{value:"Scheduler Interface Revamp",id:"scheduler-interface-revamp",level:3},{value:"Kubernetes Dependency Upgrade",id:"kubernetes-dependency-upgrade",level:3},{value:"Latest Performance Benchmarking Results",id:"latest-performance-benchmarking-results",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v0121",children:"Release Announcement v0.12.1"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn (Incubating) community has voted to release 0.12.1. Apache YuniKorn (Incubating) is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on container orchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn (Incubating) community has fixed 150 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12351063",children:"JIRAs"})," in this release. Note that we decided to skip the 0.12.0 release and go directly to 0.12.1 due to a technical issue with the Go Modules system, where a marked tag cannot be updated to point to a later commit after the fact."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Chaoran Yu"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2021-12-26"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"supported-kubernetes-versions",children:"Supported Kubernetes Versions"}),"\n",(0,s.jsx)(n.p,{children:"In this release, the supported Kubernetes versions have been updated to 1.19.x, 1.20.x and 1.21.x. (The last release supported 1.17.x, 1.18.x and 1.19.x.). The YuniKorn support matrix primarily supports 3 major Kubernetes versions."}),"\n",(0,s.jsx)(n.h3,{id:"node-sorting-improvements",children:"Node Sorting Improvements"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn used to sort all nodes on demand for the scheduling of each container, which results in a slow performance when the number of nodes increases. Using an optimized data structure (B-tree), this release achieved a considerable improvement to the node sorting performance."}),"\n",(0,s.jsx)(n.h3,{id:"gang-scheduling-enhancements",children:"Gang Scheduling Enhancements"}),"\n",(0,s.jsx)(n.p,{children:"Improved test coverage. Added support for node affinity. Fixed a critical bug when handling placeholders during the removal of a node."}),"\n",(0,s.jsx)(n.h3,{id:"logging--observability-improvements",children:"Logging & Observability Improvements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enhanced logging in various components by adding logs, adjusting the severity level of existing logs and removing unneeded logs."}),"\n",(0,s.jsx)(n.li,{children:"Added support for getting a full state dump of the scheduler periodically or on demand through a REST endpoint to facilitate troubleshooting."}),"\n",(0,s.jsx)(n.li,{children:"Improved the health check of the scheduler to report issues with problematic allocations."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"scheduler-interface-revamp",children:"Scheduler Interface Revamp"}),"\n",(0,s.jsx)(n.p,{children:"Simplified the scheduler interface that the core and shim use to talk to each other. A bulky message is broken down so that each message contains a smaller payload and is only for a specific purpose. Most messages are now made bi-directional between the core and the shim."}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-dependency-upgrade",children:"Kubernetes Dependency Upgrade"}),"\n",(0,s.jsx)(n.p,{children:"The version of Kubernetes that the K8shim depends on has been upgraded from 1.16 to 1.20. This paves the way for supporting future versions of Kubernetes. As a result of this work, the predicate logic has been rewritten using the Scheduling Framework."}),"\n",(0,s.jsx)(n.h3,{id:"latest-performance-benchmarking-results",children:"Latest Performance Benchmarking Results"}),"\n",(0,s.jsx)(n.p,{children:"We are excited to publish the performance evaluation results of the latest code base using Kubemark. YuniKorn achieved up to 4x throughput improvement over the default scheduler."}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new committers Craig Condit, Chenya Zhang, Chaoran Yu and Chia-Ping Tsai, as well as new mentors Luciano Resende and Wei-Chiu Chuang. We would love to see more committers joining the community and help to shape the project. In the past few months, we continue to have bi-weekly community meetings in 2 different time zones, ad-hoc meetings, offline channel discussions. The community will continue to be open."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},71935:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-0.12.2",title:"Release Announcement v0.12.2"},a="Release Announcement v0.12.2",o={type:"mdx",permalink:"/release-announce/0.12.2",source:"@site/src/pages/release-announce/0.12.2.md",title:"Release Announcement v0.12.2",description:"\x3c!--",frontMatter:{id:"rn-0.12.2",title:"Release Announcement v0.12.2"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Supported Kubernetes versions",id:"supported-kubernetes-versions",level:3},{value:"Separation of admission controller deployment from scheduler deployment",id:"separation-of-admission-controller-deployment-from-scheduler-deployment",level:3},{value:"Removal of beta API usage in admission controller",id:"removal-of-beta-api-usage-in-admission-controller",level:3},{value:"Deprecation of old REST API endpoints",id:"deprecation-of-old-rest-api-endpoints",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v0122",children:"Release Announcement v0.12.2"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn (Incubating) community has voted to release 0.12.2. Apache YuniKorn (Incubating) is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on container orchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn (Incubating) community has fixed 19 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12351270",children:"JIRAs"})," in this release. Version 0.12.2 is primarily a maintenance release to allow better compatibility with current Kubernetes releases. There is also a fix for a critical issue affecting the usage of dynamic volumes that was found in 0.12.1, so all users of 0.12.1 are urged to upgrade."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Craig Condit"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2022-02-03"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"supported-kubernetes-versions",children:"Supported Kubernetes versions"}),"\n",(0,s.jsx)(n.p,{children:"In this release, support for Kubernetes 1.22.x and 1.23.x was added (the last release supported 1.19.x, 1.20.x and 1.21.x). Apache YuniKorn (Incubating) attempts to support all current Kubernetes releases."}),"\n",(0,s.jsx)(n.h3,{id:"separation-of-admission-controller-deployment-from-scheduler-deployment",children:"Separation of admission controller deployment from scheduler deployment"}),"\n",(0,s.jsx)(n.p,{children:"As of 0.12.2, the Admission controller is now managed explicitly via Helm instead of being ad-hoc installed from within the scheduler. This will make scheduler restarts and future upgrades more reliable. However, this does mean that migration from versions < 0.12.2 to versions >= 0.12.2 will require an uninstall/reinstall cycle via Helm. We expect that Helm upgrades will function properly moving forward."}),"\n",(0,s.jsx)(n.h3,{id:"removal-of-beta-api-usage-in-admission-controller",children:"Removal of beta API usage in admission controller"}),"\n",(0,s.jsx)(n.p,{children:"In 0.12.2, the admission controller was updated to remove usage of a few beta Kubernetes APIs which were dropped from Kubernetes 1.22. This now allows us to deploy on all currently maintained Kubernetes releases."}),"\n",(0,s.jsx)(n.h3,{id:"deprecation-of-old-rest-api-endpoints",children:"Deprecation of old REST API endpoints"}),"\n",(0,s.jsx)(n.p,{children:"The REST API has been updated with endpoints that support specifying partitions. The old versions which do not take a partition argument have been deprecated and will be removed in an upcoming release:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/ws/v1/queues"})," replaced with ",(0,s.jsx)(n.code,{children:"/ws/v1/partition/{partitionName}/queues"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/ws/v1/apps"})," replaced with ",(0,s.jsx)(n.code,{children:"/ws/v1/partition/{partitionName}/apps"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/ws/v1/nodes"})," replaced with ",(0,s.jsx)(n.code,{children:"/ws/v1/partition/{partitionName}/nodes"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn (Incubating) community is pleased to welcome new committers Peter Bacsko and Yu Teng Chen. We would love to see more committers joining the community and help to shape the project. We continue to have bi-weekly community meetings in 2 different time zones, ad-hoc meetings, and offline channel discussions. The community continues to be open to all interested parties."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1716:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-0.8.0",title:"Release Announcement v0.8.0"},a="Release Announcement v0.8.0",o={type:"mdx",permalink:"/release-announce/0.8.0",source:"@site/src/pages/release-announce/0.8.0.md",title:"Release Announcement v0.8.0",description:"\x3c!--",frontMatter:{id:"rn-0.8.0",title:"Release Announcement v0.8.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Queues and placement rules",id:"queues-and-placement-rules",level:3},{value:"Pluggable Application Management",id:"pluggable-application-management",level:3},{value:"Resource Reservation",id:"resource-reservation",level:3},{value:"Pluggable Node Sorting Policies",id:"pluggable-node-sorting-policies",level:3},{value:"Improved Scheduling Performance",id:"improved-scheduling-performance",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",br:"br",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v080",children:"Release Announcement v0.8.0"}),"\n",(0,s.jsx)(n.p,{children:"This is the first release of Apache YuniKorn (Incubating)."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn (Incubating) community has fixed 60 JIRAs in this release: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12348926",children:"YuniKorn jiras fixed in 0.8.0"})]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Weiwei Yang"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2020-05-04"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"queues-and-placement-rules",children:"Queues and placement rules"}),"\n",(0,s.jsxs)(n.p,{children:["With this new dynamic queue management feature, users can set up placement rules to delegate queue management.",(0,s.jsx)(n.br,{}),"\n","This enables use cases like mapping a K8 namespace to a YuniKorn queue without the need to pre-create all queues.",(0,s.jsx)(n.br,{}),"\n","Queues are created based on placement rules when required for running an application. Dynamic queues are deleted when no longer required."]}),"\n",(0,s.jsx)(n.h3,{id:"pluggable-application-management",children:"Pluggable Application Management"}),"\n",(0,s.jsx)(n.p,{children:"A pluggable app management framework is being added to this release, with this feature, YuniKorn can be easily integrated with 3rd party K8s operators, such as Spark-k8s-operator, Flink-k8s-operator, etc."}),"\n",(0,s.jsx)(n.h3,{id:"resource-reservation",children:"Resource Reservation"}),"\n",(0,s.jsx)(n.p,{children:"Reservation is the methodology used to avoid large/picky resource requests being starved in the batch scheduling scenario."}),"\n",(0,s.jsx)(n.p,{children:"One node is reserved for a specific request from an application, effectively removing it from the available node list for other applications."}),"\n",(0,s.jsx)(n.h3,{id:"pluggable-node-sorting-policies",children:"Pluggable Node Sorting Policies"}),"\n",(0,s.jsx)(n.p,{children:"There are 2 builtin node sorting policies (FAIR and BinPacking) available in YuniKorn with regards to allocation distribution."}),"\n",(0,s.jsx)(n.p,{children:"The node sorting policies are pluggable, users can implement their own policies and plug that into the scheduler."}),"\n",(0,s.jsx)(n.h3,{id:"improved-scheduling-performance",children:"Improved Scheduling Performance"}),"\n",(0,s.jsx)(n.p,{children:"When running Big Data batch workloads, e.g Spark, on K8s, scheduler throughput becomes one of the main concerns.\nIn YuniKorn, there are lots of optimizations to improve the performance, such as a fully async event-driven system and low-latency sorting policies."}),"\n",(0,s.jsx)(n.p,{children:"Based on our test using Kubemark, YuniKorn is 2x+ faster than the default K8s scheduler."}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"Since the birth of the YuniKorn project, the feedback has been well-received. We are thankful to have such a diverse community where we have members from Microsoft, LinkedIn, Alibaba, Apple, Tencent, Nvidia, and Cloudera, to help and guide the project\u2019s growth.\nMany thanks to everyone who contributed to the release, and everyone in the Apache YuniKorn (Incubating) community!"}),"\n",(0,s.jsx)(n.p,{children:"This release is a result of direct and indirect efforts from many. The following  who contributed directly by submitting patches: Adam Antal, Akhil Puthenveettil Balan, Bhuvan Mysore, Jetly Jaimin, Kinga Marton, Sunil Govindan, Tao Yang, Wangda Tan, Wanqiang Ji, Weiwei Yang, Wilfred Spiegelenburg, Vinod Kumar Vavilapalli."}),"\n",(0,s.jsx)(n.p,{children:"Thanks to our mentors Felix Cheung, Holden Karau, Jason Lowe, Junping Du for helping us to set up repositories, permissions, and guide us on how to do the development and release the Apache way."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},32159:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-0.9.0",title:"Release Announcement v0.9.0"},a="Release Announcement v0.9.0",o={type:"mdx",permalink:"/release-announce/0.9.0",source:"@site/src/pages/release-announce/0.9.0.md",title:"Release Announcement v0.9.0",description:"\x3c!--",frontMatter:{id:"rn-0.9.0",title:"Release Announcement v0.9.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Resource Quota Management",id:"resource-quota-management",level:3},{value:"Job Ordering Policy: StateAware (optimized FIFO)",id:"job-ordering-policy-stateaware-optimized-fifo",level:3},{value:"Improvements for Auto-scaling",id:"improvements-for-auto-scaling",level:3},{value:"Event Cache System",id:"event-cache-system",level:3},{value:"More Comprehensive Web UI",id:"more-comprehensive-web-ui",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",br:"br",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v090",children:"Release Announcement v0.9.0"}),"\n",(0,s.jsx)(n.p,{children:"It gives us great pleasure to announce that the Apache YuniKorn (Incubating) community has voted to release 0.9.0. This is the 2nd release as an Apache Incubator project."}),"\n",(0,s.jsxs)(n.p,{children:["Apache YuniKorn (Incubating) is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on the container orchestration framework for on-prem and on-cloud use cases.",(0,s.jsx)(n.br,{}),"\n","This release has further improved the capabilities of resource scheduling and management on Kubernetes, along with some optimizations for running Apache Spark, Apache Flink workloads."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn (Incubating) community has fixed over 130 JIRAs in this release: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12348947",children:"YuniKorn jiras fixed in 0.9.0"})]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Wilfred Spiegelenburg"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2020-08-28"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"resource-quota-management",children:"Resource Quota Management"}),"\n",(0,s.jsxs)(n.p,{children:["This version YuniKorn provides a seamless way to manage resource quota for a Kubernetes cluster, it can work as an alternative to the ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/policy/resource-quotas/",children:"namespace resource quota"}),".",(0,s.jsx)(n.br,{}),"\n","There are 2 main advantages of using this feature comparing to the namespace resource quota:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The namespace resource quota is counting resources at the admission phase, irrespective of whether the pod is using the resources or not. This can lead up to issues that the namespace resources could not be efficiently used."}),"\n",(0,s.jsx)(n.li,{children:"The namespace resource quota is flat, it doesn't support hierarchy resource quota management."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The resource quota admission controller rejects the pods if it could cause the namespace to exceed its quota, this increases the complexity of the client side code.",(0,s.jsx)(n.br,{}),"\n","By using the resource quota management provided by YuniKorn, it is more efficient, seamlessly setup and it provides the job queue to handle common scheduling ordering requirements."]}),"\n",(0,s.jsx)(n.h3,{id:"job-ordering-policy-stateaware-optimized-fifo",children:"Job Ordering Policy: StateAware (optimized FIFO)"}),"\n",(0,s.jsx)(n.p,{children:"The StateAware app sorting policy orders jobs in a queue in FIFO order, and schedules them one by one on conditions. The condition is to wait for the application to enter a runnable state. This avoids the common race condition while submitting lots of batch jobs, e.g Spark, to a single namespace (or cluster). By enforcing the certain ordering of jobs, it also improves the scheduling of jobs to be more predictable. More explanation of this feature can be found in doc here."}),"\n",(0,s.jsx)(n.h3,{id:"improvements-for-auto-scaling",children:"Improvements for Auto-scaling"}),"\n",(0,s.jsx)(n.p,{children:"In this release, YuniKorn has been tested heavily to work nicely with the Kubernetes cluster-autoscaler. It brings the maximum elasticity to the Kubernetes cluster by working efficiently with the cluster-autoscaler. Some bugs are fixed and some improvements are done in this release."}),"\n",(0,s.jsx)(n.h3,{id:"event-cache-system",children:"Event Cache System"}),"\n",(0,s.jsx)(n.p,{children:"In this release, an efficient event cache system is added into the scheduler. This system caches some key scheduling events in a memory store and publishes them to the Kubernetes event system when needed. More scheduling events are visible directly from Kubernetes by using kubectl command. This helps to improve the usability and debuggability a lot."}),"\n",(0,s.jsx)(n.h3,{id:"more-comprehensive-web-ui",children:"More Comprehensive Web UI"}),"\n",(0,s.jsxs)(n.p,{children:['YuniKorn UI provides a better centralized view for resource management. A new "nodes" page has been added to the UI, to display the detailed nodes info in the cluster.',(0,s.jsx)(n.br,{}),"\n","The apps page has been enhanced, it now provides a search box to search apps by queue name or application ID."]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome a new committer Gao Li. We would love to see more committers joining the community and help to shape the project. In the past few months, we continue to have bi-weekly community meetings in 2 different time zones. Thanks for all the community folks who joined these meetings and provided feedback and valuable ideas."}),"\n",(0,s.jsx)(n.p,{children:"Thanks to the following contributors who directly contributed code to the project: Adam Antal, Akhil Puthenveettil Balan, Ayub Khan Pathan, Kinga Marton, Manikandan R, Sunil Govindan, Tao Yang, Tingyao Huang, Tim Rots, Wangda Tan, Wanqiang Ji, Weiwei Yang, Wilfred Spiegelenburg."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},18723:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.0.0",title:"Release Announcement v1.0.0"},a="Release Announcement v1.0.0",o={type:"mdx",permalink:"/release-announce/1.0.0",source:"@site/src/pages/release-announce/1.0.0.md",title:"Release Announcement v1.0.0",description:"\x3c!--",frontMatter:{id:"rn-1.0.0",title:"Release Announcement v1.0.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Incompatible changes",id:"incompatible-changes",level:2},{value:"helm upgrade",id:"helm-upgrade",level:3},{value:"Configuration changes",id:"configuration-changes",level:3},{value:"Resource Display and Communication",id:"resource-display-and-communication",level:3},{value:"Timestamps in REST responses",id:"timestamps-in-rest-responses",level:3},{value:"Removal of old REST API endpoints",id:"removal-of-old-rest-api-endpoints",level:3},{value:"Highlights",id:"highlights",level:2},{value:"Plugin mode technical Preview",id:"plugin-mode-technical-preview",level:3},{value:"Memory and cpu usage fixes",id:"memory-and-cpu-usage-fixes",level:3},{value:"Security improvements",id:"security-improvements",level:3},{value:"Validation tool",id:"validation-tool",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v100",children:"Release Announcement v1.0.0"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to release 1.0.0. This is the first release of Apache YuniKorn after graduation from the incubator."}),"\n",(0,s.jsx)(n.p,{children:"Apache YuniKorn is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on container orchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has fixed 173 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12350818",children:"JIRAs"})," in this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Wilfred Spiegelenburg"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 3 May 2022"}),"\n",(0,s.jsx)(n.h2,{id:"incompatible-changes",children:"Incompatible changes"}),"\n",(0,s.jsx)(n.p,{children:"As part of this release a number of incompatible changes have been introduced."}),"\n",(0,s.jsx)(n.h3,{id:"helm-upgrade",children:"helm upgrade"}),"\n",(0,s.jsx)(n.p,{children:"With the changes made to the helm charts running a helm upgrade from an older version to 1.0.0 might not work.\nThe workaround is to first uninstall the old version and then perform a clean installation of the current release."}),"\n",(0,s.jsx)(n.h3,{id:"configuration-changes",children:"Configuration changes"}),"\n",(0,s.jsxs)(n.p,{children:["Size modifiers are now supported for the queue configuration.\nThis changes the way quota values are interpreted in the configuration.\nBefore 1.0.0 all memory values were interpreted as ",(0,s.jsx)(n.em,{children:"megabytes"})," and vcore (cpu) values as ",(0,s.jsx)(n.em,{children:"milli cores"}),".\nFrom 1.0.0 onwards memory values are specified in ",(0,s.jsx)(n.strong,{children:"bytes"})," and vcores are specified in ",(0,s.jsx)(n.strong,{children:"cores"})," ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-629",children:"YUNIKORN-629"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"To maintain the same interpretation of values in the configuration make the following changes to the pre-1.0.0 configuration:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"change"}),(0,s.jsx)(n.th,{children:"old value"}),(0,s.jsx)(n.th,{children:"new value"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"memory"}),(0,s.jsx)(n.td,{children:"add M"}),(0,s.jsx)(n.td,{children:"memory: 2048"}),(0,s.jsx)(n.td,{children:"memory: 2048M"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"vcore"}),(0,s.jsx)(n.td,{children:"add m"}),(0,s.jsx)(n.td,{children:"vcore: 250"}),(0,s.jsx)(n.td,{children:"vcore: 250m"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"other"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsx)(n.td,{children:"license: 1"}),(0,s.jsx)(n.td,{children:"license: 1"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"resource-display-and-communication",children:"Resource Display and Communication"}),"\n",(0,s.jsxs)(n.p,{children:["The conversion of memory resources of pods and other objects by the k8shim into megabytes could cause a discrepancy between the size accounted for by the Kubernetes tools and YuniKorn.\nThis could lead to issues around node fits and autoscaling of nodes.\nIn 1.0.0 all memory resources are converted to ",(0,s.jsx)(n.strong,{children:"bytes"})," before being used in calculation and communications ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1105",children:"YUNIKORN-1105"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Resources in all REST response objects are no longer a single string but are JSON structures using a key-value pair for each resource type.\nAn example of the new resource JSON response object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"allocatedResource": {\n  "memory": 54000000,\n  "vcore": 80\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The REST representation does not include or support size modifiers.\nThe change for using ",(0,s.jsx)(n.strong,{children:"bytes"})," in all communication for memory flows through into the REST response objects.\nCPU values, i.e. vcore, communication has not changed and still uses ",(0,s.jsx)(n.strong,{children:"milli cores"}),".\nThe REST documentation has been updated to show the new resource structures ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-165",children:"YUNIKORN-165"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"timestamps-in-rest-responses",children:"Timestamps in REST responses"}),"\n",(0,s.jsxs)(n.p,{children:["All timestamps in the rest API are now returned as the number of nanoseconds elapsed since 1 January 1970 UTC.\nThe time range in a ",(0,s.jsx)(n.code,{children:"int64"})," that can be displayed ranges from the year 1678 or to the year 2262, see ",(0,s.jsx)(n.a,{href:"https://pkg.go.dev/time#Time.UnixNano",children:"Go Time UnixNano"})," for details.\nTimestamps in earlier releases were converted to a string as part of the REST response creation with inconsistent layouts ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1170",children:"YUNIKORN-1170"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"removal-of-old-rest-api-endpoints",children:"Removal of old REST API endpoints"}),"\n",(0,s.jsx)(n.p,{children:"The REST API has been updated with endpoints that support specifying partitions. The old versions which do not take a partition argument have been removed:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/ws/v1/queues"})," replaced with ",(0,s.jsx)(n.code,{children:"/ws/v1/partition/{partitionName}/queues"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/ws/v1/apps"})," replaced with ",(0,s.jsx)(n.code,{children:"ws/v1/partition/{partitionName}/queues/{queueName}/application"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/ws/v1/nodes"})," replaced with ",(0,s.jsx)(n.code,{children:"/ws/v1/partition/{partitionName}/nodes"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-954",children:"YUNIKORN-954"})}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"plugin-mode-technical-preview",children:"Plugin mode technical Preview"}),"\n",(0,s.jsxs)(n.p,{children:["As part of this release a new deployment mode is added which is built on top of the ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/",children:"Scheduling Framework"}),".\nThis is a major change in the way the scheduler k8shim works. As the implementation is not considered mature yet the deployment mode is considered a tech preview.\nThe design document can be found on the website as the ",(0,s.jsx)(n.a,{href:"https://yunikorn.apache.org/docs/next/design/scheduler_plugin",children:"K8s Scheduler Plugin"})," design document.\nBoth standard and plugin deployment images are build by the default build process.\nThe choice between deployment types is ",(0,s.jsx)(n.a,{href:"https://yunikorn.apache.org/docs/next/user_guide/deployment_modes",children:"based on a helm variable"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"memory-and-cpu-usage-fixes",children:"Memory and cpu usage fixes"}),"\n",(0,s.jsxs)(n.p,{children:["As part of the release the communication between the core and the k8shim has been simplified ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-462",children:"YUNIKORN-462"}),".\nUsing those changes the caches in the k8shim have been simplified and numerous memory leaks have been fixed.\nMore detail in the jiras ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-876",children:"YUNIKORN-876"})," and ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1100",children:"YUNIKORN-1100"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["An idle loop in the core has been removed which drops CPU usage of the scheduler if no scheduling action are performed ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1106",children:"YUNIKORN-1106"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"security-improvements",children:"Security improvements"}),"\n",(0,s.jsx)(n.p,{children:"A number of changes have been made to improve security."}),"\n",(0,s.jsxs)(n.p,{children:["The scheduler no longer uses ",(0,s.jsx)(n.code,{children:"cluster-admin"})," privileges.\nThe privileges used by the scheduler are the same as the default scheduler uses.\nSome additional privileges required for placeholder pods have been added ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-997",children:"YUNIKORN-997"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The processes within the docker images no longer run as the ",(0,s.jsx)(n.code,{children:"root"})," user but use the ",(0,s.jsx)(n.code,{children:"yunikorn"})," user ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1111",children:"YUNIKORN-1111"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Certificates used by the admission controller are automatically rotated before they expire without downtime ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1119",children:"YUNIKORN-1119"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Placeholders run a simple pause image. This pause image by default is loaded from an external image repository.\nYuniKorn now allows setting a custom image for placeholder. One image can be specified for the deployment.\nIt accepts an image name, including a hostname, that can use a local repository for air-gapped deployments ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-638",children:"YUNIKORN-638"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"The placeholder image should be a lightweight image, preferable a pause or sleep image."})}),"\n",(0,s.jsx)(n.h3,{id:"validation-tool",children:"Validation tool"}),"\n",(0,s.jsxs)(n.p,{children:["As part of the release a new script is distributed that allows the creation of a simple ",(0,s.jsx)(n.code,{children:"kind"})," based Kubernetes cluster."]}),"\n",(0,s.jsxs)(n.p,{children:["Unpack the archive and follow the instructions in the ",(0,s.jsx)(n.code,{children:"README.md"})," file to build the images.\nRun the script for more instructions and to list the tools required for validating the release:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"./validate_cluster.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"kind"})," cluster created is a small, but fully functional Kubernetes cluster, with Apache YuniKorn deployed ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-764",children:"YUNIKORN-764"})]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"Since the last release Apache YuniKorn has graduated from the incubator."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},21080:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.1.0",title:"Release Announcement v1.1.0"},a="Release Announcement v1.1.0",o={type:"mdx",permalink:"/release-announce/1.1.0",source:"@site/src/pages/release-announce/1.1.0.md",title:"Release Announcement v1.1.0",description:"\x3c!--",frontMatter:{id:"rn-1.1.0",title:"Release Announcement v1.1.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"REST API documentation and enhancements",id:"rest-api-documentation-and-enhancements",level:3},{value:"Multi-architecture build",id:"multi-architecture-build",level:3},{value:"Recovery stabilization",id:"recovery-stabilization",level:3},{value:"DaemonSet scheduling",id:"daemonset-scheduling",level:3},{value:"e2e testing improvements",id:"e2e-testing-improvements",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v110",children:"Release Announcement v1.1.0"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to release 1.1.0. Apache YuniKorn is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on container orchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has fixed 89 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12351692",children:"JIRAs"})," in this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Peter Bacsko"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2022-09-08"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"rest-api-documentation-and-enhancements",children:"REST API documentation and enhancements"}),"\n",(0,s.jsxs)(n.p,{children:["The REST API now can return the details of a ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1217",children:"specific application"})," and list the ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1263",children:"pending allocations"})," of an application.\nDocumentation of the REST API have also been enhanced."]}),"\n",(0,s.jsx)(n.h3,{id:"multi-architecture-build",children:"Multi-architecture build"}),"\n",(0,s.jsxs)(n.p,{children:["With the ARM architecture becoming more popular, we now ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1215",children:"build"})," binaries and Docker images for both ",(0,s.jsx)(n.code,{children:"amd64"})," and ",(0,s.jsx)(n.code,{children:"arm64"})," targets."]}),"\n",(0,s.jsx)(n.h3,{id:"recovery-stabilization",children:"Recovery stabilization"}),"\n",(0,s.jsxs)(n.p,{children:["Several issues have been identified during the recovery phase of Yunikorn which mostly affected gang scheduling (eg. running placeholders getting replaced ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1197",children:"immediately"}),") but also Spark ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1217",children:"workloads"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"daemonset-scheduling",children:"DaemonSet scheduling"}),"\n",(0,s.jsx)(n.p,{children:"Scheduling of DaemonSet pods were problematic before this release. If the node was full, then those pods might not have been scheduled. However, it is usually important to start DeamonSet pods as they often perform tasks that are necessary on all nodes like log collection and aggregation, resource monitoring, storage management, etc. meaning they have priority over regular application pods."}),"\n",(0,s.jsxs)(n.p,{children:["The implementation of ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1085",children:"YUNIKORN-1085"})," ensures that we have a predictable preemption mechanism which terminates running pods if necessary to make room for DaemonSet pods."]}),"\n",(0,s.jsx)(n.h3,{id:"e2e-testing-improvements",children:"e2e testing improvements"}),"\n",(0,s.jsxs)(n.p,{children:["Additional end-to-end tests have been ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-751",children:"written"})," to increase the coverage of Yunikorn as we support more K8s versions."]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new PMC members Peter Bacsko, Manikandan Ramaraj and committer Ted Lin."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},15097:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.2.0",title:"Release Announcement v1.2.0"},a="Release Announcement v1.2.0",o={type:"mdx",permalink:"/release-announce/1.2.0",source:"@site/src/pages/release-announce/1.2.0.md",title:"Release Announcement v1.2.0",description:"\x3c!--",frontMatter:{id:"rn-1.2.0",title:"Release Announcement v1.2.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"User Quota Tracking",id:"user-quota-tracking",level:3},{value:"Enhanced User &amp; Group handling",id:"enhanced-user--group-handling",level:3},{value:"Support app/task priority aware scheduling",id:"support-apptask-priority-aware-scheduling",level:3},{value:"Support arbitrary resources in namespace annotation",id:"support-arbitrary-resources-in-namespace-annotation",level:3},{value:"Build YuniKorn against Kubernetes 1.23",id:"build-yunikorn-against-kubernetes-123",level:3},{value:"Configuration V2",id:"configuration-v2",level:3},{value:"Revamping e2e testing",id:"revamping-e2e-testing",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v120",children:"Release Announcement v1.2.0"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to release 1.2.0. Apache YuniKorn is a standalone resource scheduler, designed for managing, and scheduling Big Data workloads on container orchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has fixed 150 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12352194",children:"JIRAs"})," in this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Manikandan R"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2023-02-02"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"user-quota-tracking",children:"User Quota Tracking"}),"\n",(0,s.jsxs)(n.p,{children:["User & Group resource usage are being tracked at queue level considering its hierarchical structure too for property overriding preference as well. Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-984",children:"YUNIKORN-984"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"enhanced-user--group-handling",children:"Enhanced User & Group handling"}),"\n",(0,s.jsxs)(n.p,{children:["User & Group handling mechanism has been enhanced, which in turn opened up various ways to detect the User and its associated group. Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1306",children:"YUNIKORN-1306"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"support-apptask-priority-aware-scheduling",children:"Support app/task priority aware scheduling"}),"\n",(0,s.jsxs)(n.p,{children:["In addition to Fair & FIFO based application sorting policies, Priority based sorting has been designed and implemented in such a way to be compatible with Kubernetes standard priority handling wherever possible. Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1",children:"YUNIKORN-1"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"support-arbitrary-resources-in-namespace-annotation",children:"Support arbitrary resources in namespace annotation"}),"\n",(0,s.jsxs)(n.p,{children:["Support for all resource types in namespace annotations is possible now. Earlier only cpu and memory resource type is allowed. Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1275",children:"YUNIKORN-1275"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"build-yunikorn-against-kubernetes-123",children:"Build YuniKorn against Kubernetes 1.23"}),"\n",(0,s.jsxs)(n.p,{children:["This will allow us to maintain support for running on 1.21 and later clusters, while also supporting newer scheduler features. Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1348",children:"YUNIKORN-1348"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-v2",children:"Configuration V2"}),"\n",(0,s.jsxs)(n.p,{children:["The configuration system has been overhauled ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1221",children:"YUNIKORN-1221"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"REST interface for config update has been removed"}),"\n",(0,s.jsx)(n.li,{children:"New config map: yunikorn-defaults managed via helm"}),"\n",(0,s.jsx)(n.li,{children:"Existing config map retained."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Please read ",(0,s.jsx)(n.a,{href:"https://yunikorn.apache.org/docs/next/design/config_v2",children:"https://yunikorn.apache.org/docs/next/design/config_v2"})," for details"]}),"\n",(0,s.jsx)(n.h3,{id:"revamping-e2e-testing",children:"Revamping e2e testing"}),"\n",(0,s.jsxs)(n.p,{children:["Stabilization of various end-to-end tests has been covered as part of ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1491",children:"YUNIKORN-1491"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new PMC member Tingyao Huang and committer Rainie Li."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},18550:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.3.0",title:"Release Announcement v1.3.0"},a="Release Announcement v1.3.0",o={type:"mdx",permalink:"/release-announce/1.3.0",source:"@site/src/pages/release-announce/1.3.0.md",title:"Release Announcement v1.3.0",description:"\x3c!--",frontMatter:{id:"rn-1.3.0",title:"Release Announcement v1.3.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Kubernetes version support",id:"kubernetes-version-support",level:3},{value:"Preemption support",id:"preemption-support",level:3},{value:"Better support for BestEffort pods",id:"better-support-for-besteffort-pods",level:3},{value:"Lighter and more secure images",id:"lighter-and-more-secure-images",level:3},{value:"Dynamic namespace support in admission controller",id:"dynamic-namespace-support-in-admission-controller",level:3},{value:"CPU and memory optimization",id:"cpu-and-memory-optimization",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v130",children:"Release Announcement v1.3.0"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to\nrelease 1.3.0. Apache YuniKorn is a standalone resource scheduler, designed\nfor managing and scheduling Big Data workloads on container orchestration\nframeworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has resolved 160\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12352568",children:"JIRAs"}),"\nin this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Yu Teng Chen"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2023-06-12"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-version-support",children:"Kubernetes version support"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn 1.3.0 supports running on Kubernetes clusters from version 1.21\nthrough 1.26. Support for running on Kubernetes 1.27 is ",(0,s.jsx)(n.strong,{children:"not"})," supported,\nbut is planned for YuniKorn 1.4.0."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": YuniKorn 1.3.0 is the last release planned which will support\nKubernetes 1.21 through 1.23; YuniKorn 1.4.0 is expected to require Kubernetes\n1.24 or later."]}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1699",children:"YUNIKORN-1699"}),"\nfor details."]}),"\n",(0,s.jsx)(n.h3,{id:"preemption-support",children:"Preemption support"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn now has comprehensive support for preemption, including customizable\npolicies per queue. Please see the the Preemption\n",(0,s.jsx)(n.a,{href:"https://yunikorn.apache.org/docs/next/design/preemption",children:"design documentation"}),"\nfor more details."]}),"\n",(0,s.jsxs)(n.p,{children:["JIRA: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1461",children:"YUNIKORN-1461"})]}),"\n",(0,s.jsx)(n.h3,{id:"better-support-for-besteffort-pods",children:"Better support for BestEffort pods"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn now tracks the number of pods scheduled as part of queue quota limits.\nThis allows limiting parallelism within a queue, but also provides better\nsupport for running Kubernetes pods with the ",(0,s.jsx)(n.code,{children:"PodQOSBestEffort"})," scheduling class\n(i.e. those with no explicit resources requested)."]}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1632",children:"YUNIKORN-1632"}),"\nfor details."]}),"\n",(0,s.jsx)(n.h3,{id:"lighter-and-more-secure-images",children:"Lighter and more secure images"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn 1.3.0 has moved to using scratch base images for all containers. This\nresults in a smaller footprint as well as improved security as YuniKorn no\nlonger ships any third-party software in our container images."}),"\n",(0,s.jsxs)(n.p,{children:["A prerequisite for using scratch images was the move from nginx to a go-based\nweb server for the web application. Please see\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1672",children:"YUNIKORN-1672"})," and\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1535",children:"YUNIKORN-1535"})," for\ndetails."]}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-namespace-support-in-admission-controller",children:"Dynamic namespace support in admission controller"}),"\n",(0,s.jsx)(n.p,{children:"The YuniKorn admission controller now suports per-namespace annotations to\ncontrol YuniKorn-specific processing. Previously, only a static list of\nregular expressions (still supported) could be used to select namespaces."}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1647",children:"YUNIKORN-1647"}),"\nfor details."]}),"\n",(0,s.jsx)(n.h3,{id:"cpu-and-memory-optimization",children:"CPU and memory optimization"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn 1.3.0 contains several optimizations for CPU and memory usage, making\nthis release the lightest and fastest yet. Some examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1719",children:"YUNIKORN-1719"}),"\nImprove the performance of Application.sortRequests()"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1720",children:"YUNIKORN-1720"}),"\nImprove the performance of node.preAllocateCheck()"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1722",children:"YUNIKORN-1722"}),"\nExcessive resource clone calls in calculateNodesResourceUsage()"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1746",children:"YUNIKORN-1746"}),"\nImprove the performance of nodeInfoListerImpl.List()"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new PMC member\nYu Teng Chen and committer Qi Zhu."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},56703:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.4.0",title:"Release Announcement v1.4.0"},a="Release Announcement v1.4.0",o={type:"mdx",permalink:"/release-announce/1.4.0",source:"@site/src/pages/release-announce/1.4.0.md",title:"Release Announcement v1.4.0",description:"\x3c!--",frontMatter:{id:"rn-1.4.0",title:"Release Announcement v1.4.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Incompatible changes",id:"incompatible-changes",level:2},{value:"Kubernetes version support",id:"kubernetes-version-support",level:3},{value:"Highlights",id:"highlights",level:2},{value:"Kubernetes version support",id:"kubernetes-version-support-1",level:3},{value:"PreEnqueue plugin implementation",id:"preenqueue-plugin-implementation",level:3},{value:"Scoped logging",id:"scoped-logging",level:3},{value:"Removal of the Spark Operator Application Manager",id:"removal-of-the-spark-operator-application-manager",level:3},{value:"Removal of the YuniKorn application CRD",id:"removal-of-the-yunikorn-application-crd",level:3},{value:"Application traceability",id:"application-traceability",level:3},{value:"Build updates",id:"build-updates",level:3},{value:"Community",id:"community",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v140",children:"Release Announcement v1.4.0"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to release 1.4.0.\nApache YuniKorn is a standalone resource scheduler, designed for managing and scheduling Batch and Data workloads on container\norchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has resolved 270 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12352769",children:"JIRAs"})," in this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Wilfred Spiegelenburg"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2023-11-20"}),"\n",(0,s.jsx)(n.h2,{id:"incompatible-changes",children:"Incompatible changes"}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-version-support",children:"Kubernetes version support"}),"\n",(0,s.jsxs)(n.p,{children:["Running on Kubernetes 1.23 or earlier is ",(0,s.jsx)(n.strong,{children:"not"})," supported, for earlier Kubernetes releases use YuniKorn 1.3.0."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": YuniKorn 1.3.0 is the last release that supports Kubernetes 1.23 or earlier."]}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-version-support-1",children:"Kubernetes version support"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn 1.4.0 supports running on Kubernetes clusters from version 1.24 through to 1.28."}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1841",children:"YUNIKORN-1841"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"preenqueue-plugin-implementation",children:"PreEnqueue plugin implementation"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn has added the pre-enqueue scheduling hook for the scheduler plugin.\nThis allows gating Pods that are not yet ready for scheduling due to queue pressure.\nThe pre-enqueue scheduling hook was added to Kubernetes via ",(0,s.jsx)(n.a,{href:"https://github.com/kubernetes/enhancements/blob/master/keps/sig-scheduling/3521-pod-scheduling-readiness/README.md",children:"KEP-3521"}),".\nIt was turned on by default in Kubernetes 1.27."]}),"\n",(0,s.jsx)(n.p,{children:"The feature allows managing quotas outside the Kubernetes Resource Quota system with a lower impact on the API server and default scheduler.\nThis functionality is important for the plugin implementation of YuniKorn only.\nIn the standard mode YuniKorn has always been gating pods without an external impact."}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1844",children:"YUNIKORN-1844"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"scoped-logging",children:"Scoped logging"}),"\n",(0,s.jsx)(n.p,{children:"Logging within the YuniKorn code is now scoped to parts of the code base.\nScoped logging allows changing the logging level for a part of the code.\nThis gives administrators more control over the levels per subsystem."}),"\n",(0,s.jsxs)(n.p,{children:["Log levels can now also be specified in a textual form and not just as a number.\nDocumentation is part of the ",(0,s.jsx)(n.a,{href:"https://yunikorn.apache.org/docs/user_guide/service_config",children:"service configuration"})]}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1823",children:"YUNIKORN-1823"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"removal-of-the-spark-operator-application-manager",children:"Removal of the Spark Operator Application Manager"}),"\n",(0,s.jsx)(n.p,{children:"The Spark operator application manager was added to support the Spark operator as an external integration.\nIt added a full lifecycle for the Spark applications submitted via the operator.\nThe application manager was never turned on by default and needed a custom configuration to enable it."}),"\n",(0,s.jsxs)(n.p,{children:["The implementation caused duplicate Spark applications to be created and was partially rolled back in ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-643",children:"YUNIKORN-643"})," as part of YuniKorn 0.11.\nThe functionality that was left was also covered by the basic pod handling.\nTo reduce code maintenance the remaining code is now also removed without the loss of functionality."]}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2092",children:"YUNIKORN-2092"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"removal-of-the-yunikorn-application-crd",children:"Removal of the YuniKorn application CRD"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn 1.4.0 has removed the application CRD.\nThe application CRD was added to allow a simpler integration of applications with YuniKorn.\nThis integration never got used and all current integrations rely on simple labels or annotations on the pods."}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1672",children:"YUNIKORN-1672"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"application-traceability",children:"Application traceability"}),"\n",(0,s.jsx)(n.p,{children:"Tracking and troubleshooting applications is specific for YuniKorn.\nKubernetes does not have an application concept.\nAn event system has been added to expose the changes to applications, queues and nodes for external consumption."}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1628",children:"YUNIKORN-1628"})]}),"\n",(0,s.jsx)(n.h3,{id:"build-updates",children:"Build updates"}),"\n",(0,s.jsx)(n.p,{children:"The YuniKorn builds no longer relies on centrally installed tools while building the binaries or images.\nEach build will download and maintain its own set of tools, not even shared between checked out repositories."}),"\n",(0,s.jsx)(n.p,{children:"The change was announced on the dev@ mailing list in late July."}),"\n",(0,s.jsx)(n.p,{children:"Please see these jiras for details:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["k8shim: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1862",children:"YUNIKORN-1862"})," and ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1865",children:"YUNIKORN-1865"})]}),"\n",(0,s.jsxs)(n.li,{children:["core: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1868",children:"YUNIKORN-1868"})]}),"\n",(0,s.jsxs)(n.li,{children:["web UI: ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1873",children:"YUNIKORN-1873"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,s.jsx)(n.p,{children:"The Apache YuniKorn community is pleased to welcome new PMC member Rainie Li and committers: Hsuang Zong Wu and PoAn Yang."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},75796:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.5.0",title:"Release Announcement v1.5.0"},a="Release Announcement v1.5.0",o={type:"mdx",permalink:"/release-announce/1.5.0",source:"@site/src/pages/release-announce/1.5.0.md",title:"Release Announcement v1.5.0",description:"\x3c!--",frontMatter:{id:"rn-1.5.0",title:"Release Announcement v1.5.0"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Kubernetes version support",id:"kubernetes-version-support",level:3},{value:"Event streaming API",id:"event-streaming-api",level:3},{value:"Web UI enhancements",id:"web-ui-enhancements",level:3},{value:"Improved Prometheus metric grouping",id:"improved-prometheus-metric-grouping",level:3},{value:"Revamped scheduler initialization support",id:"revamped-scheduler-initialization-support",level:3},{value:"Better allocation traceability",id:"better-allocation-traceability",level:3},{value:"REST API enhancements",id:"rest-api-enhancements",level:3},{value:"Incompatible changes",id:"incompatible-changes",level:2},{value:"State-aware scheduling deprecated",id:"state-aware-scheduling-deprecated",level:3},{value:"Compressed ConfigMap entry handling",id:"compressed-configmap-entry-handling",level:3},{value:"Partition vs. root queue limits",id:"partition-vs-root-queue-limits",level:3},{value:"Application sort policy is no longer inherited",id:"application-sort-policy-is-no-longer-inherited",level:3},{value:"REST API: Periodic state dump endpoint removed",id:"rest-api-periodic-state-dump-endpoint-removed",level:3},{value:"REST API: Response code changes",id:"rest-api-response-code-changes",level:3},{value:"REST API: Health check response code",id:"rest-api-health-check-response-code",level:3},{value:"Credits",id:"credits",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v150",children:"Release Announcement v1.5.0"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to release 1.5.0.\nApache YuniKorn is a standalone resource scheduler, designed for managing and scheduling Batch and Data workloads on container\norchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has resolved 219 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12353274",children:"JIRAs"})," in this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: TingYao Huang"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2024-03-14"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"kubernetes-version-support",children:"Kubernetes version support"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn 1.5.0 utilizes Kubernetes 1.29.2 as a build dependency, and adds\nofficial runtime support for Kubernetes 1.29 clusters. Kubernetes clusters from\n1.24 through 1.29 are supported at runtime."}),"\n",(0,s.jsx)(n.h3,{id:"event-streaming-api",children:"Event streaming API"}),"\n",(0,s.jsxs)(n.p,{children:["Building on the application traceability enhancements released in YuniKorn\n1.4.0, YuniKorn 1.5.0 adds support for consumers to subscribe to YuniKorn\nevents in a streaming fashion. Additionaly, several new event types have\nbeen implemented. See the\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2115",children:"YUNIKORN-2115"})," umbrella\nJIRA for more information."]}),"\n",(0,s.jsx)(n.h3,{id:"web-ui-enhancements",children:"Web UI enhancements"}),"\n",(0,s.jsx)(n.p,{children:"YuniKorn 1.5.0 includes a number of updates to the Web UI:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1362",children:"YUNIKORN-1362"}),"\nAllow node list filtering based on selector"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2088",children:"YUNIKORN-2088"}),"\nNode utilization chart updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2214",children:"YUNIKORN-2214"}),"\nAdd Sorting functionality to the Allocation view"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2414",children:"YUNIKORN-2414"}),"\nSupport air-gapped clusters by embedding fonts and icons"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"improved-prometheus-metric-grouping",children:"Improved Prometheus metric grouping"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn queue metrics are now exposed via labels on a common\n",(0,s.jsx)(n.code,{children:"yunikorn_queue_app"})," metric with separate ",(0,s.jsx)(n.code,{children:"queue"})," labels for each queue.\nThe existing ",(0,s.jsx)(n.code,{children:"yunikorn_{queue_name}_queue_app"})," metrics are still generated,\nbut will be ",(0,s.jsx)(n.strong,{children:"deprecated"})," in YuniKorn 1.6.0 and ",(0,s.jsx)(n.strong,{children:"removed"})," in YuniKorn 1.7.0.\nSee ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-970",children:"YUNIKORN-970"})," for\nfurther details."]}),"\n",(0,s.jsx)(n.h3,{id:"revamped-scheduler-initialization-support",children:"Revamped scheduler initialization support"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn 1.5.0 has dramatically simplified the logic used during early\nstartup to reconcile existing allocations with YuniKorn's internal\nstate. The result is faster, more stable initialization and better\nconsistency with the Kubernetes API server. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2099",children:"YUNIKORN-2099"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"better-allocation-traceability",children:"Better allocation traceability"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn internally tracks asks and allocations by a unique ID. In YuniKorn\n1.5.0, the ask ID (typically derived from the Pod UID in Kubernetes) will\nbe used as the basis for the allocation ID as well. A future enhancement is\nplanned to unify asks and allocations into a single object for even more\nsimplified tracking. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2204",children:"YUNIKORN-2204"})," for\ninformation regarding the YuniKorn 1.5.0 changes and\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2457",children:"YUNIKORN-2457"})," for\nfuture enhancements."]}),"\n",(0,s.jsx)(n.h3,{id:"rest-api-enhancements",children:"REST API enhancements"}),"\n",(0,s.jsxs)(n.p,{children:["The YuniKorn REST API has been enhanced to support the retrieval of\nnode utilization statistics for multiple resource types in addition to\nthe existing support for dominant resource type. This allows for more\nexpressive visualizations in the YuniKorn Web UI. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2257",children:"YUNIKORN-2257"})," for\ndetails."]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, the REST API now supports querying rejected, running, and\ncompleted applications as well as individual applications without the\nneed to walk the queue heirarchy first. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2235",children:"YUNIKORN-2235"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"incompatible-changes",children:"Incompatible changes"}),"\n",(0,s.jsx)(n.h3,{id:"state-aware-scheduling-deprecated",children:"State-aware scheduling deprecated"}),"\n",(0,s.jsxs)(n.p,{children:["State-aware scheduling has been deprecated in YuniKorn 1.5.0, and will be\nremoved in YuniKorn 1.6.0. To preserve backwards compatibility, as of YuniKorn\n1.6.0, the ",(0,s.jsx)(n.code,{children:"stateaware"})," application sorting policy will be treated as an alias\nfor ",(0,s.jsx)(n.code,{children:"fifo"}),". Users are encouraged to migrate directly to ",(0,s.jsx)(n.code,{children:"fifo"})," and utilize\ngang scheduling or specify queue maximum applications to limit concurrency\ninstead. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2440",children:"YUNIKORN-2440"})," for\nmore information."]}),"\n",(0,s.jsx)(n.h3,{id:"compressed-configmap-entry-handling",children:"Compressed ConfigMap entry handling"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1875",children:"YUNIKORN-1875"})," added\nsupport for compressed ConfigMap entries in YuniKorn 1.4.0 using gzip\ncompression. Due to an error in the implementation, values were required\nto be base64-encoded twice in the resulting YAML in order to be read.\nThis has been corrected in YuniKorn 1.5.0, but will result in a parsing\nerror if previously double-encoded data is encountered. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2287",children:"YUNIKORN-2287"})," for\nimplementation details."]}),"\n",(0,s.jsx)(n.h3,{id:"partition-vs-root-queue-limits",children:"Partition vs. root queue limits"}),"\n",(0,s.jsxs)(n.p,{children:["Previously, YuniKorn documentation stated that a root queue limit is equivalent\nto a partition limit. However, partition limits did not work correctly.\nPartition limits have now updated to be consistent with the documentation.\nSee ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2260",children:"YUNIKORN-2260"})," for\nmore information."]}),"\n",(0,s.jsx)(n.h3,{id:"application-sort-policy-is-no-longer-inherited",children:"Application sort policy is no longer inherited"}),"\n",(0,s.jsxs)(n.p,{children:["In old versions of YuniKorn, the ",(0,s.jsx)(n.code,{children:"application.sort.policy"})," queue property\non a parent queue was inherited by child queues. This behavior was deprecated\nin favor of child templates in YuniKorn 0.12.1 and has produced warnings\nsince then. As of YuniKorn 1.5.0, the inheritance of ",(0,s.jsx)(n.code,{children:"application.sort.policy"}),"\nhas been removed. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-809",children:"YUNIKORN-809"})," for details."]}),"\n",(0,s.jsx)(n.h3,{id:"rest-api-periodic-state-dump-endpoint-removed",children:"REST API: Periodic state dump endpoint removed"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"/ws/v1/periodicstatedump"})," endpoint in the REST API was deprecated\nand made a no-op in YuniKorn 1.2.0. It has been removed completely from\nYuniKorn 1.5.0. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2426",children:"YUNIKORN-2426"})," for\ndetails."]}),"\n",(0,s.jsx)(n.h3,{id:"rest-api-response-code-changes",children:"REST API: Response code changes"}),"\n",(0,s.jsxs)(n.p,{children:["Several response status codes in the REST API have been modified to better\nconform to best practices. Missing objects will now return 404 (Not Found)\ninstead of 400 (Bad Request). Disabled features will now return\n500 (Internal Server Error) instead of 400 (Bad Request) or 501\n(Not Implemented). See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2163",children:"YUNIKORN-2163"})," for further\ndetails."]}),"\n",(0,s.jsx)(n.h3,{id:"rest-api-health-check-response-code",children:"REST API: Health check response code"}),"\n",(0,s.jsxs)(n.p,{children:["The health check REST API endpoint will now return a 200 (OK) regardless\nof health status rather than a 503 (Service Unavailable). This allows browser\nclients (such as the YuniKorn Web UI) to parse the response in all cases.\nTo verify the health checks, the JSON response itself shoud be consulted rather\nthan relying on the HTTP status code. See\n",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-1997",children:"YUNIKORN-1997"})," for more\ninformation."]}),"\n",(0,s.jsx)(n.h2,{id:"credits",children:"Credits"}),"\n",(0,s.jsx)(n.p,{children:"The YuniKorn 1.5.0 release would not have been possible without the\nhard work of our community and we would like to thank the following\ncontributors to this release:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Alex Stiff, Cliff Su, Craig Condit, Denis Coric, Dong-Lin Hsieh,\nGeordie Mai, Hsin-Ying Lee, Hsuan Zong Wu, Jia Sheng Chen,\nJiaChi Wang, Junyan Ling, Kuan-Po Tseng, Manikandan Ramaraj,\nMichael Akinyemi, Ovidiu Feodorov, Peter Bacsko, PoAn Yang,\nPriyansh Choudhary, Qi Zhu, Ryan Lo, Ted Lin, Vinayak Hegde,\nWeiwei Yang, Wilfred Spiegelenburg, William Tom, Xie Yifan,\nYongjun Zhang, Yu-Lin Chen"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Additionally, the Apache YuniKorn community would like to welcome new\nPMC member Chia-Ping Tsai and new committers Kuan-Po Tseng, Ryan Lo, and\nYu-Lin Chen."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},82923:(e,n,i)=>{"use strict";i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>h});var s=i(13274),r=i(1780);const t={id:"rn-1.5.1",title:"Release Announcement v1.5.1"},a="Release Announcement v1.5.1",o={type:"mdx",permalink:"/release-announce/1.5.1",source:"@site/src/pages/release-announce/1.5.1.md",title:"Release Announcement v1.5.1",description:"\x3c!--",frontMatter:{id:"rn-1.5.1",title:"Release Announcement v1.5.1"},unlisted:!1},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Highlights",id:"highlights",level:2},{value:"Locking fixes to avoid existing and potential deadlocks",id:"locking-fixes-to-avoid-existing-and-potential-deadlocks",level:3},{value:"Deadlock detection",id:"deadlock-detection",level:3}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-announcement-v151",children:"Release Announcement v1.5.1"}),"\n",(0,s.jsx)(n.p,{children:"We are pleased to announce that the Apache YuniKorn community has voted to release 1.5.1.\nApache YuniKorn is a standalone resource scheduler, designed for managing and scheduling Batch and Data workloads on container\norchestration frameworks like Kubernetes for on-prem and on-cloud use cases."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Apache YuniKorn community has resolved 18 ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/issues/?filter=12353383",children:"JIRAs"})," in this release."]}),"\n",(0,s.jsx)(n.p,{children:"Release manager: Peter Bacsko"}),"\n",(0,s.jsx)(n.p,{children:"Release date: 2024-05-16"}),"\n",(0,s.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"locking-fixes-to-avoid-existing-and-potential-deadlocks",children:"Locking fixes to avoid existing and potential deadlocks"}),"\n",(0,s.jsxs)(n.p,{children:["YuniKorn 1.5.0 contained a deadlock as described in ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2521",children:"YUNIKORN-2521"}),".\nThis deadlock is now fixed along with other potential deadlocks. See ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2544",children:"YUNIKORN-2544"}),"\nfor a more detailed overview of the locking changes made."]}),"\n",(0,s.jsx)(n.h3,{id:"deadlock-detection",children:"Deadlock detection"}),"\n",(0,s.jsxs)(n.p,{children:["The tool ",(0,s.jsx)(n.a,{href:"https://github.com/sasha-s/go-deadlock",children:"go-deadlock"})," has been integrated to the codebase,\nwhich makes it possible to detect potential deadlocks at runtime. Since this slows down the scheduler\nand increases memory usage, it's disabled by default. However, it's enabled during the unit test phase\nwith \"make test\". See ",(0,s.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/YUNIKORN-2539",children:"YUNIKORN-2539"})," for details."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},88310:(e,n,i)=>{"use strict";i.r(n),i.d(n,{default:()=>o});i(79474);var s=i(45871),r=i(4373),t=i(13274);let a={};a=i(82404).keys(),a.sort(((e,n)=>-e.localeCompare(n,void 0,{numeric:!0,sensitivity:"base"})));const o=()=>(0,t.jsx)(s.A,{description:"Apache YuniKorn website",children:(0,t.jsxs)("main",{children:[(0,t.jsx)("br",{}),(0,t.jsxs)("div",{className:r.A.postContainer,children:[(0,t.jsx)("h1",{children:"Release Announcements"}),(0,t.jsx)("div",{children:"List of all release announcements for Apache YuniKorn. Sorted by version, not by release date."}),(0,t.jsx)("br",{}),a.map((e=>{const n=e.replace("./","").replace(".md",""),i="/release-announce/"+n;return(0,t.jsx)("div",{className:r.A.indentReleases,children:(0,t.jsxs)("a",{href:i,children:["Release v",n]})})})),(0,t.jsx)("br",{})]})]})})},4373:(e,n,i)=>{"use strict";i.d(n,{A:()=>s});const s={heroBanner:"heroBanner_UJJx",buttons:"buttons_pzbO",heroImg:"heroImg_wnHi",features:"features_keug",featureImage:"featureImage_yA8i",timelineImage:"timelineImage_A6U2",postContainer:"postContainer_QeqF",postContent:"postContent_ni6p",postTitle:"postTitle_BgnT",whyText:"whyText_JYIL",learnMoreURL:"learnMoreURL_P1Ax",indentReleases:"indentReleases_cz3S"}},82404:(e,n,i)=>{var s={"./0.10.0.md":10255,"./0.11.0.md":10596,"./0.12.1.md":35046,"./0.12.2.md":71935,"./0.8.0.md":1716,"./0.9.0.md":32159,"./1.0.0.md":18723,"./1.1.0.md":21080,"./1.2.0.md":15097,"./1.3.0.md":18550,"./1.4.0.md":56703,"./1.5.0.md":75796,"./1.5.1.md":82923};function r(e){var n=t(e);return i(n)}function t(e){if(!i.o(s,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s[e]}r.keys=function(){return Object.keys(s)},r.resolve=t,e.exports=r,r.id=82404},1780:(e,n,i)=>{"use strict";i.d(n,{R:()=>a,x:()=>o});var s=i(79474);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);